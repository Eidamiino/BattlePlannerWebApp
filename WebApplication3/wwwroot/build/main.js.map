{"version":3,"file":"main.js","sources":["../../../assets/node_modules/svelte/internal/index.mjs","../../../assets/node_modules/svelte/store/index.mjs","../../../assets/node_modules/regexparam/dist/index.mjs","../../../assets/node_modules/svelte-spa-router/Router.svelte","../../../assets/src/features/requirements/requirement-provider.js","../../../assets/src/features/requirements/RequirementsList.svelte","../../../assets/src/features/requirements/Requirements.svelte","../../../assets/src/features/resources/ResourceList.svelte","../../../assets/src/features/resources/resource-provider.js","../../../assets/src/features/resources/Resources.svelte","../../../assets/src/features/not-found/NotFound.svelte","../../../assets/src/routes.js","../../../assets/src/App.svelte","../../../assets/src/main.js"],"sourcesContent":["function noop() { }\nconst identity = x => x;\nfunction assign(tar, src) {\n    // @ts-ignore\n    for (const k in src)\n        tar[k] = src[k];\n    return tar;\n}\n// Adapted from https://github.com/then/is-promise/blob/master/index.js\n// Distributed under MIT License https://github.com/then/is-promise/blob/master/LICENSE\nfunction is_promise(value) {\n    return !!value && (typeof value === 'object' || typeof value === 'function') && typeof value.then === 'function';\n}\nfunction add_location(element, file, line, column, char) {\n    element.__svelte_meta = {\n        loc: { file, line, column, char }\n    };\n}\nfunction run(fn) {\n    return fn();\n}\nfunction blank_object() {\n    return Object.create(null);\n}\nfunction run_all(fns) {\n    fns.forEach(run);\n}\nfunction is_function(thing) {\n    return typeof thing === 'function';\n}\nfunction safe_not_equal(a, b) {\n    return a != a ? b == b : a !== b || ((a && typeof a === 'object') || typeof a === 'function');\n}\nlet src_url_equal_anchor;\nfunction src_url_equal(element_src, url) {\n    if (!src_url_equal_anchor) {\n        src_url_equal_anchor = document.createElement('a');\n    }\n    src_url_equal_anchor.href = url;\n    return element_src === src_url_equal_anchor.href;\n}\nfunction not_equal(a, b) {\n    return a != a ? b == b : a !== b;\n}\nfunction is_empty(obj) {\n    return Object.keys(obj).length === 0;\n}\nfunction validate_store(store, name) {\n    if (store != null && typeof store.subscribe !== 'function') {\n        throw new Error(`'${name}' is not a store with a 'subscribe' method`);\n    }\n}\nfunction subscribe(store, ...callbacks) {\n    if (store == null) {\n        return noop;\n    }\n    const unsub = store.subscribe(...callbacks);\n    return unsub.unsubscribe ? () => unsub.unsubscribe() : unsub;\n}\nfunction get_store_value(store) {\n    let value;\n    subscribe(store, _ => value = _)();\n    return value;\n}\nfunction component_subscribe(component, store, callback) {\n    component.$$.on_destroy.push(subscribe(store, callback));\n}\nfunction create_slot(definition, ctx, $$scope, fn) {\n    if (definition) {\n        const slot_ctx = get_slot_context(definition, ctx, $$scope, fn);\n        return definition[0](slot_ctx);\n    }\n}\nfunction get_slot_context(definition, ctx, $$scope, fn) {\n    return definition[1] && fn\n        ? assign($$scope.ctx.slice(), definition[1](fn(ctx)))\n        : $$scope.ctx;\n}\nfunction get_slot_changes(definition, $$scope, dirty, fn) {\n    if (definition[2] && fn) {\n        const lets = definition[2](fn(dirty));\n        if ($$scope.dirty === undefined) {\n            return lets;\n        }\n        if (typeof lets === 'object') {\n            const merged = [];\n            const len = Math.max($$scope.dirty.length, lets.length);\n            for (let i = 0; i < len; i += 1) {\n                merged[i] = $$scope.dirty[i] | lets[i];\n            }\n            return merged;\n        }\n        return $$scope.dirty | lets;\n    }\n    return $$scope.dirty;\n}\nfunction update_slot_base(slot, slot_definition, ctx, $$scope, slot_changes, get_slot_context_fn) {\n    if (slot_changes) {\n        const slot_context = get_slot_context(slot_definition, ctx, $$scope, get_slot_context_fn);\n        slot.p(slot_context, slot_changes);\n    }\n}\nfunction update_slot(slot, slot_definition, ctx, $$scope, dirty, get_slot_changes_fn, get_slot_context_fn) {\n    const slot_changes = get_slot_changes(slot_definition, $$scope, dirty, get_slot_changes_fn);\n    update_slot_base(slot, slot_definition, ctx, $$scope, slot_changes, get_slot_context_fn);\n}\nfunction get_all_dirty_from_scope($$scope) {\n    if ($$scope.ctx.length > 32) {\n        const dirty = [];\n        const length = $$scope.ctx.length / 32;\n        for (let i = 0; i < length; i++) {\n            dirty[i] = -1;\n        }\n        return dirty;\n    }\n    return -1;\n}\nfunction exclude_internal_props(props) {\n    const result = {};\n    for (const k in props)\n        if (k[0] !== '$')\n            result[k] = props[k];\n    return result;\n}\nfunction compute_rest_props(props, keys) {\n    const rest = {};\n    keys = new Set(keys);\n    for (const k in props)\n        if (!keys.has(k) && k[0] !== '$')\n            rest[k] = props[k];\n    return rest;\n}\nfunction compute_slots(slots) {\n    const result = {};\n    for (const key in slots) {\n        result[key] = true;\n    }\n    return result;\n}\nfunction once(fn) {\n    let ran = false;\n    return function (...args) {\n        if (ran)\n            return;\n        ran = true;\n        fn.call(this, ...args);\n    };\n}\nfunction null_to_empty(value) {\n    return value == null ? '' : value;\n}\nfunction set_store_value(store, ret, value) {\n    store.set(value);\n    return ret;\n}\nconst has_prop = (obj, prop) => Object.prototype.hasOwnProperty.call(obj, prop);\nfunction action_destroyer(action_result) {\n    return action_result && is_function(action_result.destroy) ? action_result.destroy : noop;\n}\n\nconst is_client = typeof window !== 'undefined';\nlet now = is_client\n    ? () => window.performance.now()\n    : () => Date.now();\nlet raf = is_client ? cb => requestAnimationFrame(cb) : noop;\n// used internally for testing\nfunction set_now(fn) {\n    now = fn;\n}\nfunction set_raf(fn) {\n    raf = fn;\n}\n\nconst tasks = new Set();\nfunction run_tasks(now) {\n    tasks.forEach(task => {\n        if (!task.c(now)) {\n            tasks.delete(task);\n            task.f();\n        }\n    });\n    if (tasks.size !== 0)\n        raf(run_tasks);\n}\n/**\n * For testing purposes only!\n */\nfunction clear_loops() {\n    tasks.clear();\n}\n/**\n * Creates a new task that runs on each raf frame\n * until it returns a falsy value or is aborted\n */\nfunction loop(callback) {\n    let task;\n    if (tasks.size === 0)\n        raf(run_tasks);\n    return {\n        promise: new Promise(fulfill => {\n            tasks.add(task = { c: callback, f: fulfill });\n        }),\n        abort() {\n            tasks.delete(task);\n        }\n    };\n}\n\n// Track which nodes are claimed during hydration. Unclaimed nodes can then be removed from the DOM\n// at the end of hydration without touching the remaining nodes.\nlet is_hydrating = false;\nfunction start_hydrating() {\n    is_hydrating = true;\n}\nfunction end_hydrating() {\n    is_hydrating = false;\n}\nfunction upper_bound(low, high, key, value) {\n    // Return first index of value larger than input value in the range [low, high)\n    while (low < high) {\n        const mid = low + ((high - low) >> 1);\n        if (key(mid) <= value) {\n            low = mid + 1;\n        }\n        else {\n            high = mid;\n        }\n    }\n    return low;\n}\nfunction init_hydrate(target) {\n    if (target.hydrate_init)\n        return;\n    target.hydrate_init = true;\n    // We know that all children have claim_order values since the unclaimed have been detached if target is not <head>\n    let children = target.childNodes;\n    // If target is <head>, there may be children without claim_order\n    if (target.nodeName === 'HEAD') {\n        const myChildren = [];\n        for (let i = 0; i < children.length; i++) {\n            const node = children[i];\n            if (node.claim_order !== undefined) {\n                myChildren.push(node);\n            }\n        }\n        children = myChildren;\n    }\n    /*\n    * Reorder claimed children optimally.\n    * We can reorder claimed children optimally by finding the longest subsequence of\n    * nodes that are already claimed in order and only moving the rest. The longest\n    * subsequence of nodes that are claimed in order can be found by\n    * computing the longest increasing subsequence of .claim_order values.\n    *\n    * This algorithm is optimal in generating the least amount of reorder operations\n    * possible.\n    *\n    * Proof:\n    * We know that, given a set of reordering operations, the nodes that do not move\n    * always form an increasing subsequence, since they do not move among each other\n    * meaning that they must be already ordered among each other. Thus, the maximal\n    * set of nodes that do not move form a longest increasing subsequence.\n    */\n    // Compute longest increasing subsequence\n    // m: subsequence length j => index k of smallest value that ends an increasing subsequence of length j\n    const m = new Int32Array(children.length + 1);\n    // Predecessor indices + 1\n    const p = new Int32Array(children.length);\n    m[0] = -1;\n    let longest = 0;\n    for (let i = 0; i < children.length; i++) {\n        const current = children[i].claim_order;\n        // Find the largest subsequence length such that it ends in a value less than our current value\n        // upper_bound returns first greater value, so we subtract one\n        // with fast path for when we are on the current longest subsequence\n        const seqLen = ((longest > 0 && children[m[longest]].claim_order <= current) ? longest + 1 : upper_bound(1, longest, idx => children[m[idx]].claim_order, current)) - 1;\n        p[i] = m[seqLen] + 1;\n        const newLen = seqLen + 1;\n        // We can guarantee that current is the smallest value. Otherwise, we would have generated a longer sequence.\n        m[newLen] = i;\n        longest = Math.max(newLen, longest);\n    }\n    // The longest increasing subsequence of nodes (initially reversed)\n    const lis = [];\n    // The rest of the nodes, nodes that will be moved\n    const toMove = [];\n    let last = children.length - 1;\n    for (let cur = m[longest] + 1; cur != 0; cur = p[cur - 1]) {\n        lis.push(children[cur - 1]);\n        for (; last >= cur; last--) {\n            toMove.push(children[last]);\n        }\n        last--;\n    }\n    for (; last >= 0; last--) {\n        toMove.push(children[last]);\n    }\n    lis.reverse();\n    // We sort the nodes being moved to guarantee that their insertion order matches the claim order\n    toMove.sort((a, b) => a.claim_order - b.claim_order);\n    // Finally, we move the nodes\n    for (let i = 0, j = 0; i < toMove.length; i++) {\n        while (j < lis.length && toMove[i].claim_order >= lis[j].claim_order) {\n            j++;\n        }\n        const anchor = j < lis.length ? lis[j] : null;\n        target.insertBefore(toMove[i], anchor);\n    }\n}\nfunction append(target, node) {\n    target.appendChild(node);\n}\nfunction append_styles(target, style_sheet_id, styles) {\n    const append_styles_to = get_root_for_style(target);\n    if (!append_styles_to.getElementById(style_sheet_id)) {\n        const style = element('style');\n        style.id = style_sheet_id;\n        style.textContent = styles;\n        append_stylesheet(append_styles_to, style);\n    }\n}\nfunction get_root_for_style(node) {\n    if (!node)\n        return document;\n    const root = node.getRootNode ? node.getRootNode() : node.ownerDocument;\n    if (root && root.host) {\n        return root;\n    }\n    return node.ownerDocument;\n}\nfunction append_empty_stylesheet(node) {\n    const style_element = element('style');\n    append_stylesheet(get_root_for_style(node), style_element);\n    return style_element.sheet;\n}\nfunction append_stylesheet(node, style) {\n    append(node.head || node, style);\n    return style.sheet;\n}\nfunction append_hydration(target, node) {\n    if (is_hydrating) {\n        init_hydrate(target);\n        if ((target.actual_end_child === undefined) || ((target.actual_end_child !== null) && (target.actual_end_child.parentNode !== target))) {\n            target.actual_end_child = target.firstChild;\n        }\n        // Skip nodes of undefined ordering\n        while ((target.actual_end_child !== null) && (target.actual_end_child.claim_order === undefined)) {\n            target.actual_end_child = target.actual_end_child.nextSibling;\n        }\n        if (node !== target.actual_end_child) {\n            // We only insert if the ordering of this node should be modified or the parent node is not target\n            if (node.claim_order !== undefined || node.parentNode !== target) {\n                target.insertBefore(node, target.actual_end_child);\n            }\n        }\n        else {\n            target.actual_end_child = node.nextSibling;\n        }\n    }\n    else if (node.parentNode !== target || node.nextSibling !== null) {\n        target.appendChild(node);\n    }\n}\nfunction insert(target, node, anchor) {\n    target.insertBefore(node, anchor || null);\n}\nfunction insert_hydration(target, node, anchor) {\n    if (is_hydrating && !anchor) {\n        append_hydration(target, node);\n    }\n    else if (node.parentNode !== target || node.nextSibling != anchor) {\n        target.insertBefore(node, anchor || null);\n    }\n}\nfunction detach(node) {\n    if (node.parentNode) {\n        node.parentNode.removeChild(node);\n    }\n}\nfunction destroy_each(iterations, detaching) {\n    for (let i = 0; i < iterations.length; i += 1) {\n        if (iterations[i])\n            iterations[i].d(detaching);\n    }\n}\nfunction element(name) {\n    return document.createElement(name);\n}\nfunction element_is(name, is) {\n    return document.createElement(name, { is });\n}\nfunction object_without_properties(obj, exclude) {\n    const target = {};\n    for (const k in obj) {\n        if (has_prop(obj, k)\n            // @ts-ignore\n            && exclude.indexOf(k) === -1) {\n            // @ts-ignore\n            target[k] = obj[k];\n        }\n    }\n    return target;\n}\nfunction svg_element(name) {\n    return document.createElementNS('http://www.w3.org/2000/svg', name);\n}\nfunction text(data) {\n    return document.createTextNode(data);\n}\nfunction space() {\n    return text(' ');\n}\nfunction empty() {\n    return text('');\n}\nfunction listen(node, event, handler, options) {\n    node.addEventListener(event, handler, options);\n    return () => node.removeEventListener(event, handler, options);\n}\nfunction prevent_default(fn) {\n    return function (event) {\n        event.preventDefault();\n        // @ts-ignore\n        return fn.call(this, event);\n    };\n}\nfunction stop_propagation(fn) {\n    return function (event) {\n        event.stopPropagation();\n        // @ts-ignore\n        return fn.call(this, event);\n    };\n}\nfunction self(fn) {\n    return function (event) {\n        // @ts-ignore\n        if (event.target === this)\n            fn.call(this, event);\n    };\n}\nfunction trusted(fn) {\n    return function (event) {\n        // @ts-ignore\n        if (event.isTrusted)\n            fn.call(this, event);\n    };\n}\nfunction attr(node, attribute, value) {\n    if (value == null)\n        node.removeAttribute(attribute);\n    else if (node.getAttribute(attribute) !== value)\n        node.setAttribute(attribute, value);\n}\nfunction set_attributes(node, attributes) {\n    // @ts-ignore\n    const descriptors = Object.getOwnPropertyDescriptors(node.__proto__);\n    for (const key in attributes) {\n        if (attributes[key] == null) {\n            node.removeAttribute(key);\n        }\n        else if (key === 'style') {\n            node.style.cssText = attributes[key];\n        }\n        else if (key === '__value') {\n            node.value = node[key] = attributes[key];\n        }\n        else if (descriptors[key] && descriptors[key].set) {\n            node[key] = attributes[key];\n        }\n        else {\n            attr(node, key, attributes[key]);\n        }\n    }\n}\nfunction set_svg_attributes(node, attributes) {\n    for (const key in attributes) {\n        attr(node, key, attributes[key]);\n    }\n}\nfunction set_custom_element_data_map(node, data_map) {\n    Object.keys(data_map).forEach((key) => {\n        set_custom_element_data(node, key, data_map[key]);\n    });\n}\nfunction set_custom_element_data(node, prop, value) {\n    if (prop in node) {\n        node[prop] = typeof node[prop] === 'boolean' && value === '' ? true : value;\n    }\n    else {\n        attr(node, prop, value);\n    }\n}\nfunction xlink_attr(node, attribute, value) {\n    node.setAttributeNS('http://www.w3.org/1999/xlink', attribute, value);\n}\nfunction get_binding_group_value(group, __value, checked) {\n    const value = new Set();\n    for (let i = 0; i < group.length; i += 1) {\n        if (group[i].checked)\n            value.add(group[i].__value);\n    }\n    if (!checked) {\n        value.delete(__value);\n    }\n    return Array.from(value);\n}\nfunction to_number(value) {\n    return value === '' ? null : +value;\n}\nfunction time_ranges_to_array(ranges) {\n    const array = [];\n    for (let i = 0; i < ranges.length; i += 1) {\n        array.push({ start: ranges.start(i), end: ranges.end(i) });\n    }\n    return array;\n}\nfunction children(element) {\n    return Array.from(element.childNodes);\n}\nfunction init_claim_info(nodes) {\n    if (nodes.claim_info === undefined) {\n        nodes.claim_info = { last_index: 0, total_claimed: 0 };\n    }\n}\nfunction claim_node(nodes, predicate, processNode, createNode, dontUpdateLastIndex = false) {\n    // Try to find nodes in an order such that we lengthen the longest increasing subsequence\n    init_claim_info(nodes);\n    const resultNode = (() => {\n        // We first try to find an element after the previous one\n        for (let i = nodes.claim_info.last_index; i < nodes.length; i++) {\n            const node = nodes[i];\n            if (predicate(node)) {\n                const replacement = processNode(node);\n                if (replacement === undefined) {\n                    nodes.splice(i, 1);\n                }\n                else {\n                    nodes[i] = replacement;\n                }\n                if (!dontUpdateLastIndex) {\n                    nodes.claim_info.last_index = i;\n                }\n                return node;\n            }\n        }\n        // Otherwise, we try to find one before\n        // We iterate in reverse so that we don't go too far back\n        for (let i = nodes.claim_info.last_index - 1; i >= 0; i--) {\n            const node = nodes[i];\n            if (predicate(node)) {\n                const replacement = processNode(node);\n                if (replacement === undefined) {\n                    nodes.splice(i, 1);\n                }\n                else {\n                    nodes[i] = replacement;\n                }\n                if (!dontUpdateLastIndex) {\n                    nodes.claim_info.last_index = i;\n                }\n                else if (replacement === undefined) {\n                    // Since we spliced before the last_index, we decrease it\n                    nodes.claim_info.last_index--;\n                }\n                return node;\n            }\n        }\n        // If we can't find any matching node, we create a new one\n        return createNode();\n    })();\n    resultNode.claim_order = nodes.claim_info.total_claimed;\n    nodes.claim_info.total_claimed += 1;\n    return resultNode;\n}\nfunction claim_element_base(nodes, name, attributes, create_element) {\n    return claim_node(nodes, (node) => node.nodeName === name, (node) => {\n        const remove = [];\n        for (let j = 0; j < node.attributes.length; j++) {\n            const attribute = node.attributes[j];\n            if (!attributes[attribute.name]) {\n                remove.push(attribute.name);\n            }\n        }\n        remove.forEach(v => node.removeAttribute(v));\n        return undefined;\n    }, () => create_element(name));\n}\nfunction claim_element(nodes, name, attributes) {\n    return claim_element_base(nodes, name, attributes, element);\n}\nfunction claim_svg_element(nodes, name, attributes) {\n    return claim_element_base(nodes, name, attributes, svg_element);\n}\nfunction claim_text(nodes, data) {\n    return claim_node(nodes, (node) => node.nodeType === 3, (node) => {\n        const dataStr = '' + data;\n        if (node.data.startsWith(dataStr)) {\n            if (node.data.length !== dataStr.length) {\n                return node.splitText(dataStr.length);\n            }\n        }\n        else {\n            node.data = dataStr;\n        }\n    }, () => text(data), true // Text nodes should not update last index since it is likely not worth it to eliminate an increasing subsequence of actual elements\n    );\n}\nfunction claim_space(nodes) {\n    return claim_text(nodes, ' ');\n}\nfunction find_comment(nodes, text, start) {\n    for (let i = start; i < nodes.length; i += 1) {\n        const node = nodes[i];\n        if (node.nodeType === 8 /* comment node */ && node.textContent.trim() === text) {\n            return i;\n        }\n    }\n    return nodes.length;\n}\nfunction claim_html_tag(nodes, is_svg) {\n    // find html opening tag\n    const start_index = find_comment(nodes, 'HTML_TAG_START', 0);\n    const end_index = find_comment(nodes, 'HTML_TAG_END', start_index);\n    if (start_index === end_index) {\n        return new HtmlTagHydration(undefined, is_svg);\n    }\n    init_claim_info(nodes);\n    const html_tag_nodes = nodes.splice(start_index, end_index - start_index + 1);\n    detach(html_tag_nodes[0]);\n    detach(html_tag_nodes[html_tag_nodes.length - 1]);\n    const claimed_nodes = html_tag_nodes.slice(1, html_tag_nodes.length - 1);\n    for (const n of claimed_nodes) {\n        n.claim_order = nodes.claim_info.total_claimed;\n        nodes.claim_info.total_claimed += 1;\n    }\n    return new HtmlTagHydration(claimed_nodes, is_svg);\n}\nfunction set_data(text, data) {\n    data = '' + data;\n    if (text.wholeText !== data)\n        text.data = data;\n}\nfunction set_input_value(input, value) {\n    input.value = value == null ? '' : value;\n}\nfunction set_input_type(input, type) {\n    try {\n        input.type = type;\n    }\n    catch (e) {\n        // do nothing\n    }\n}\nfunction set_style(node, key, value, important) {\n    if (value === null) {\n        node.style.removeProperty(key);\n    }\n    else {\n        node.style.setProperty(key, value, important ? 'important' : '');\n    }\n}\nfunction select_option(select, value) {\n    for (let i = 0; i < select.options.length; i += 1) {\n        const option = select.options[i];\n        if (option.__value === value) {\n            option.selected = true;\n            return;\n        }\n    }\n    select.selectedIndex = -1; // no option should be selected\n}\nfunction select_options(select, value) {\n    for (let i = 0; i < select.options.length; i += 1) {\n        const option = select.options[i];\n        option.selected = ~value.indexOf(option.__value);\n    }\n}\nfunction select_value(select) {\n    const selected_option = select.querySelector(':checked') || select.options[0];\n    return selected_option && selected_option.__value;\n}\nfunction select_multiple_value(select) {\n    return [].map.call(select.querySelectorAll(':checked'), option => option.__value);\n}\n// unfortunately this can't be a constant as that wouldn't be tree-shakeable\n// so we cache the result instead\nlet crossorigin;\nfunction is_crossorigin() {\n    if (crossorigin === undefined) {\n        crossorigin = false;\n        try {\n            if (typeof window !== 'undefined' && window.parent) {\n                void window.parent.document;\n            }\n        }\n        catch (error) {\n            crossorigin = true;\n        }\n    }\n    return crossorigin;\n}\nfunction add_resize_listener(node, fn) {\n    const computed_style = getComputedStyle(node);\n    if (computed_style.position === 'static') {\n        node.style.position = 'relative';\n    }\n    const iframe = element('iframe');\n    iframe.setAttribute('style', 'display: block; position: absolute; top: 0; left: 0; width: 100%; height: 100%; ' +\n        'overflow: hidden; border: 0; opacity: 0; pointer-events: none; z-index: -1;');\n    iframe.setAttribute('aria-hidden', 'true');\n    iframe.tabIndex = -1;\n    const crossorigin = is_crossorigin();\n    let unsubscribe;\n    if (crossorigin) {\n        iframe.src = \"data:text/html,<script>onresize=function(){parent.postMessage(0,'*')}</script>\";\n        unsubscribe = listen(window, 'message', (event) => {\n            if (event.source === iframe.contentWindow)\n                fn();\n        });\n    }\n    else {\n        iframe.src = 'about:blank';\n        iframe.onload = () => {\n            unsubscribe = listen(iframe.contentWindow, 'resize', fn);\n        };\n    }\n    append(node, iframe);\n    return () => {\n        if (crossorigin) {\n            unsubscribe();\n        }\n        else if (unsubscribe && iframe.contentWindow) {\n            unsubscribe();\n        }\n        detach(iframe);\n    };\n}\nfunction toggle_class(element, name, toggle) {\n    element.classList[toggle ? 'add' : 'remove'](name);\n}\nfunction custom_event(type, detail, { bubbles = false, cancelable = false } = {}) {\n    const e = document.createEvent('CustomEvent');\n    e.initCustomEvent(type, bubbles, cancelable, detail);\n    return e;\n}\nfunction query_selector_all(selector, parent = document.body) {\n    return Array.from(parent.querySelectorAll(selector));\n}\nfunction head_selector(nodeId, head) {\n    const result = [];\n    let started = 0;\n    for (const node of head.childNodes) {\n        if (node.nodeType === 8 /* comment node */) {\n            const comment = node.textContent.trim();\n            if (comment === `HEAD_${nodeId}_END`) {\n                started -= 1;\n                result.push(node);\n            }\n            else if (comment === `HEAD_${nodeId}_START`) {\n                started += 1;\n                result.push(node);\n            }\n        }\n        else if (started > 0) {\n            result.push(node);\n        }\n    }\n    return result;\n}\nclass HtmlTag {\n    constructor(is_svg = false) {\n        this.is_svg = false;\n        this.is_svg = is_svg;\n        this.e = this.n = null;\n    }\n    c(html) {\n        this.h(html);\n    }\n    m(html, target, anchor = null) {\n        if (!this.e) {\n            if (this.is_svg)\n                this.e = svg_element(target.nodeName);\n            else\n                this.e = element(target.nodeName);\n            this.t = target;\n            this.c(html);\n        }\n        this.i(anchor);\n    }\n    h(html) {\n        this.e.innerHTML = html;\n        this.n = Array.from(this.e.childNodes);\n    }\n    i(anchor) {\n        for (let i = 0; i < this.n.length; i += 1) {\n            insert(this.t, this.n[i], anchor);\n        }\n    }\n    p(html) {\n        this.d();\n        this.h(html);\n        this.i(this.a);\n    }\n    d() {\n        this.n.forEach(detach);\n    }\n}\nclass HtmlTagHydration extends HtmlTag {\n    constructor(claimed_nodes, is_svg = false) {\n        super(is_svg);\n        this.e = this.n = null;\n        this.l = claimed_nodes;\n    }\n    c(html) {\n        if (this.l) {\n            this.n = this.l;\n        }\n        else {\n            super.c(html);\n        }\n    }\n    i(anchor) {\n        for (let i = 0; i < this.n.length; i += 1) {\n            insert_hydration(this.t, this.n[i], anchor);\n        }\n    }\n}\nfunction attribute_to_object(attributes) {\n    const result = {};\n    for (const attribute of attributes) {\n        result[attribute.name] = attribute.value;\n    }\n    return result;\n}\nfunction get_custom_elements_slots(element) {\n    const result = {};\n    element.childNodes.forEach((node) => {\n        result[node.slot || 'default'] = true;\n    });\n    return result;\n}\nfunction construct_svelte_component(component, props) {\n    return new component(props);\n}\n\n// we need to store the information for multiple documents because a Svelte application could also contain iframes\n// https://github.com/sveltejs/svelte/issues/3624\nconst managed_styles = new Map();\nlet active = 0;\n// https://github.com/darkskyapp/string-hash/blob/master/index.js\nfunction hash(str) {\n    let hash = 5381;\n    let i = str.length;\n    while (i--)\n        hash = ((hash << 5) - hash) ^ str.charCodeAt(i);\n    return hash >>> 0;\n}\nfunction create_style_information(doc, node) {\n    const info = { stylesheet: append_empty_stylesheet(node), rules: {} };\n    managed_styles.set(doc, info);\n    return info;\n}\nfunction create_rule(node, a, b, duration, delay, ease, fn, uid = 0) {\n    const step = 16.666 / duration;\n    let keyframes = '{\\n';\n    for (let p = 0; p <= 1; p += step) {\n        const t = a + (b - a) * ease(p);\n        keyframes += p * 100 + `%{${fn(t, 1 - t)}}\\n`;\n    }\n    const rule = keyframes + `100% {${fn(b, 1 - b)}}\\n}`;\n    const name = `__svelte_${hash(rule)}_${uid}`;\n    const doc = get_root_for_style(node);\n    const { stylesheet, rules } = managed_styles.get(doc) || create_style_information(doc, node);\n    if (!rules[name]) {\n        rules[name] = true;\n        stylesheet.insertRule(`@keyframes ${name} ${rule}`, stylesheet.cssRules.length);\n    }\n    const animation = node.style.animation || '';\n    node.style.animation = `${animation ? `${animation}, ` : ''}${name} ${duration}ms linear ${delay}ms 1 both`;\n    active += 1;\n    return name;\n}\nfunction delete_rule(node, name) {\n    const previous = (node.style.animation || '').split(', ');\n    const next = previous.filter(name\n        ? anim => anim.indexOf(name) < 0 // remove specific animation\n        : anim => anim.indexOf('__svelte') === -1 // remove all Svelte animations\n    );\n    const deleted = previous.length - next.length;\n    if (deleted) {\n        node.style.animation = next.join(', ');\n        active -= deleted;\n        if (!active)\n            clear_rules();\n    }\n}\nfunction clear_rules() {\n    raf(() => {\n        if (active)\n            return;\n        managed_styles.forEach(info => {\n            const { ownerNode } = info.stylesheet;\n            // there is no ownerNode if it runs on jsdom.\n            if (ownerNode)\n                detach(ownerNode);\n        });\n        managed_styles.clear();\n    });\n}\n\nfunction create_animation(node, from, fn, params) {\n    if (!from)\n        return noop;\n    const to = node.getBoundingClientRect();\n    if (from.left === to.left && from.right === to.right && from.top === to.top && from.bottom === to.bottom)\n        return noop;\n    const { delay = 0, duration = 300, easing = identity, \n    // @ts-ignore todo: should this be separated from destructuring? Or start/end added to public api and documentation?\n    start: start_time = now() + delay, \n    // @ts-ignore todo:\n    end = start_time + duration, tick = noop, css } = fn(node, { from, to }, params);\n    let running = true;\n    let started = false;\n    let name;\n    function start() {\n        if (css) {\n            name = create_rule(node, 0, 1, duration, delay, easing, css);\n        }\n        if (!delay) {\n            started = true;\n        }\n    }\n    function stop() {\n        if (css)\n            delete_rule(node, name);\n        running = false;\n    }\n    loop(now => {\n        if (!started && now >= start_time) {\n            started = true;\n        }\n        if (started && now >= end) {\n            tick(1, 0);\n            stop();\n        }\n        if (!running) {\n            return false;\n        }\n        if (started) {\n            const p = now - start_time;\n            const t = 0 + 1 * easing(p / duration);\n            tick(t, 1 - t);\n        }\n        return true;\n    });\n    start();\n    tick(0, 1);\n    return stop;\n}\nfunction fix_position(node) {\n    const style = getComputedStyle(node);\n    if (style.position !== 'absolute' && style.position !== 'fixed') {\n        const { width, height } = style;\n        const a = node.getBoundingClientRect();\n        node.style.position = 'absolute';\n        node.style.width = width;\n        node.style.height = height;\n        add_transform(node, a);\n    }\n}\nfunction add_transform(node, a) {\n    const b = node.getBoundingClientRect();\n    if (a.left !== b.left || a.top !== b.top) {\n        const style = getComputedStyle(node);\n        const transform = style.transform === 'none' ? '' : style.transform;\n        node.style.transform = `${transform} translate(${a.left - b.left}px, ${a.top - b.top}px)`;\n    }\n}\n\nlet current_component;\nfunction set_current_component(component) {\n    current_component = component;\n}\nfunction get_current_component() {\n    if (!current_component)\n        throw new Error('Function called outside component initialization');\n    return current_component;\n}\n/**\n * Schedules a callback to run immediately before the component is updated after any state change.\n *\n * The first time the callback runs will be before the initial `onMount`\n *\n * https://svelte.dev/docs#run-time-svelte-beforeupdate\n */\nfunction beforeUpdate(fn) {\n    get_current_component().$$.before_update.push(fn);\n}\n/**\n * The `onMount` function schedules a callback to run as soon as the component has been mounted to the DOM.\n * It must be called during the component's initialisation (but doesn't need to live *inside* the component;\n * it can be called from an external module).\n *\n * `onMount` does not run inside a [server-side component](/docs#run-time-server-side-component-api).\n *\n * https://svelte.dev/docs#run-time-svelte-onmount\n */\nfunction onMount(fn) {\n    get_current_component().$$.on_mount.push(fn);\n}\n/**\n * Schedules a callback to run immediately after the component has been updated.\n *\n * The first time the callback runs will be after the initial `onMount`\n */\nfunction afterUpdate(fn) {\n    get_current_component().$$.after_update.push(fn);\n}\n/**\n * Schedules a callback to run immediately before the component is unmounted.\n *\n * Out of `onMount`, `beforeUpdate`, `afterUpdate` and `onDestroy`, this is the\n * only one that runs inside a server-side component.\n *\n * https://svelte.dev/docs#run-time-svelte-ondestroy\n */\nfunction onDestroy(fn) {\n    get_current_component().$$.on_destroy.push(fn);\n}\n/**\n * Creates an event dispatcher that can be used to dispatch [component events](/docs#template-syntax-component-directives-on-eventname).\n * Event dispatchers are functions that can take two arguments: `name` and `detail`.\n *\n * Component events created with `createEventDispatcher` create a\n * [CustomEvent](https://developer.mozilla.org/en-US/docs/Web/API/CustomEvent).\n * These events do not [bubble](https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Building_blocks/Events#Event_bubbling_and_capture).\n * The `detail` argument corresponds to the [CustomEvent.detail](https://developer.mozilla.org/en-US/docs/Web/API/CustomEvent/detail)\n * property and can contain any type of data.\n *\n * https://svelte.dev/docs#run-time-svelte-createeventdispatcher\n */\nfunction createEventDispatcher() {\n    const component = get_current_component();\n    return (type, detail, { cancelable = false } = {}) => {\n        const callbacks = component.$$.callbacks[type];\n        if (callbacks) {\n            // TODO are there situations where events could be dispatched\n            // in a server (non-DOM) environment?\n            const event = custom_event(type, detail, { cancelable });\n            callbacks.slice().forEach(fn => {\n                fn.call(component, event);\n            });\n            return !event.defaultPrevented;\n        }\n        return true;\n    };\n}\n/**\n * Associates an arbitrary `context` object with the current component and the specified `key`\n * and returns that object. The context is then available to children of the component\n * (including slotted content) with `getContext`.\n *\n * Like lifecycle functions, this must be called during component initialisation.\n *\n * https://svelte.dev/docs#run-time-svelte-setcontext\n */\nfunction setContext(key, context) {\n    get_current_component().$$.context.set(key, context);\n    return context;\n}\n/**\n * Retrieves the context that belongs to the closest parent component with the specified `key`.\n * Must be called during component initialisation.\n *\n * https://svelte.dev/docs#run-time-svelte-getcontext\n */\nfunction getContext(key) {\n    return get_current_component().$$.context.get(key);\n}\n/**\n * Retrieves the whole context map that belongs to the closest parent component.\n * Must be called during component initialisation. Useful, for example, if you\n * programmatically create a component and want to pass the existing context to it.\n *\n * https://svelte.dev/docs#run-time-svelte-getallcontexts\n */\nfunction getAllContexts() {\n    return get_current_component().$$.context;\n}\n/**\n * Checks whether a given `key` has been set in the context of a parent component.\n * Must be called during component initialisation.\n *\n * https://svelte.dev/docs#run-time-svelte-hascontext\n */\nfunction hasContext(key) {\n    return get_current_component().$$.context.has(key);\n}\n// TODO figure out if we still want to support\n// shorthand events, or if we want to implement\n// a real bubbling mechanism\nfunction bubble(component, event) {\n    const callbacks = component.$$.callbacks[event.type];\n    if (callbacks) {\n        // @ts-ignore\n        callbacks.slice().forEach(fn => fn.call(this, event));\n    }\n}\n\nconst dirty_components = [];\nconst intros = { enabled: false };\nconst binding_callbacks = [];\nconst render_callbacks = [];\nconst flush_callbacks = [];\nconst resolved_promise = Promise.resolve();\nlet update_scheduled = false;\nfunction schedule_update() {\n    if (!update_scheduled) {\n        update_scheduled = true;\n        resolved_promise.then(flush);\n    }\n}\nfunction tick() {\n    schedule_update();\n    return resolved_promise;\n}\nfunction add_render_callback(fn) {\n    render_callbacks.push(fn);\n}\nfunction add_flush_callback(fn) {\n    flush_callbacks.push(fn);\n}\n// flush() calls callbacks in this order:\n// 1. All beforeUpdate callbacks, in order: parents before children\n// 2. All bind:this callbacks, in reverse order: children before parents.\n// 3. All afterUpdate callbacks, in order: parents before children. EXCEPT\n//    for afterUpdates called during the initial onMount, which are called in\n//    reverse order: children before parents.\n// Since callbacks might update component values, which could trigger another\n// call to flush(), the following steps guard against this:\n// 1. During beforeUpdate, any updated components will be added to the\n//    dirty_components array and will cause a reentrant call to flush(). Because\n//    the flush index is kept outside the function, the reentrant call will pick\n//    up where the earlier call left off and go through all dirty components. The\n//    current_component value is saved and restored so that the reentrant call will\n//    not interfere with the \"parent\" flush() call.\n// 2. bind:this callbacks cannot trigger new flush() calls.\n// 3. During afterUpdate, any updated components will NOT have their afterUpdate\n//    callback called a second time; the seen_callbacks set, outside the flush()\n//    function, guarantees this behavior.\nconst seen_callbacks = new Set();\nlet flushidx = 0; // Do *not* move this inside the flush() function\nfunction flush() {\n    // Do not reenter flush while dirty components are updated, as this can\n    // result in an infinite loop. Instead, let the inner flush handle it.\n    // Reentrancy is ok afterwards for bindings etc.\n    if (flushidx !== 0) {\n        return;\n    }\n    const saved_component = current_component;\n    do {\n        // first, call beforeUpdate functions\n        // and update components\n        try {\n            while (flushidx < dirty_components.length) {\n                const component = dirty_components[flushidx];\n                flushidx++;\n                set_current_component(component);\n                update(component.$$);\n            }\n        }\n        catch (e) {\n            // reset dirty state to not end up in a deadlocked state and then rethrow\n            dirty_components.length = 0;\n            flushidx = 0;\n            throw e;\n        }\n        set_current_component(null);\n        dirty_components.length = 0;\n        flushidx = 0;\n        while (binding_callbacks.length)\n            binding_callbacks.pop()();\n        // then, once components are updated, call\n        // afterUpdate functions. This may cause\n        // subsequent updates...\n        for (let i = 0; i < render_callbacks.length; i += 1) {\n            const callback = render_callbacks[i];\n            if (!seen_callbacks.has(callback)) {\n                // ...so guard against infinite loops\n                seen_callbacks.add(callback);\n                callback();\n            }\n        }\n        render_callbacks.length = 0;\n    } while (dirty_components.length);\n    while (flush_callbacks.length) {\n        flush_callbacks.pop()();\n    }\n    update_scheduled = false;\n    seen_callbacks.clear();\n    set_current_component(saved_component);\n}\nfunction update($$) {\n    if ($$.fragment !== null) {\n        $$.update();\n        run_all($$.before_update);\n        const dirty = $$.dirty;\n        $$.dirty = [-1];\n        $$.fragment && $$.fragment.p($$.ctx, dirty);\n        $$.after_update.forEach(add_render_callback);\n    }\n}\n\nlet promise;\nfunction wait() {\n    if (!promise) {\n        promise = Promise.resolve();\n        promise.then(() => {\n            promise = null;\n        });\n    }\n    return promise;\n}\nfunction dispatch(node, direction, kind) {\n    node.dispatchEvent(custom_event(`${direction ? 'intro' : 'outro'}${kind}`));\n}\nconst outroing = new Set();\nlet outros;\nfunction group_outros() {\n    outros = {\n        r: 0,\n        c: [],\n        p: outros // parent group\n    };\n}\nfunction check_outros() {\n    if (!outros.r) {\n        run_all(outros.c);\n    }\n    outros = outros.p;\n}\nfunction transition_in(block, local) {\n    if (block && block.i) {\n        outroing.delete(block);\n        block.i(local);\n    }\n}\nfunction transition_out(block, local, detach, callback) {\n    if (block && block.o) {\n        if (outroing.has(block))\n            return;\n        outroing.add(block);\n        outros.c.push(() => {\n            outroing.delete(block);\n            if (callback) {\n                if (detach)\n                    block.d(1);\n                callback();\n            }\n        });\n        block.o(local);\n    }\n    else if (callback) {\n        callback();\n    }\n}\nconst null_transition = { duration: 0 };\nfunction create_in_transition(node, fn, params) {\n    const options = { direction: 'in' };\n    let config = fn(node, params, options);\n    let running = false;\n    let animation_name;\n    let task;\n    let uid = 0;\n    function cleanup() {\n        if (animation_name)\n            delete_rule(node, animation_name);\n    }\n    function go() {\n        const { delay = 0, duration = 300, easing = identity, tick = noop, css } = config || null_transition;\n        if (css)\n            animation_name = create_rule(node, 0, 1, duration, delay, easing, css, uid++);\n        tick(0, 1);\n        const start_time = now() + delay;\n        const end_time = start_time + duration;\n        if (task)\n            task.abort();\n        running = true;\n        add_render_callback(() => dispatch(node, true, 'start'));\n        task = loop(now => {\n            if (running) {\n                if (now >= end_time) {\n                    tick(1, 0);\n                    dispatch(node, true, 'end');\n                    cleanup();\n                    return running = false;\n                }\n                if (now >= start_time) {\n                    const t = easing((now - start_time) / duration);\n                    tick(t, 1 - t);\n                }\n            }\n            return running;\n        });\n    }\n    let started = false;\n    return {\n        start() {\n            if (started)\n                return;\n            started = true;\n            delete_rule(node);\n            if (is_function(config)) {\n                config = config(options);\n                wait().then(go);\n            }\n            else {\n                go();\n            }\n        },\n        invalidate() {\n            started = false;\n        },\n        end() {\n            if (running) {\n                cleanup();\n                running = false;\n            }\n        }\n    };\n}\nfunction create_out_transition(node, fn, params) {\n    const options = { direction: 'out' };\n    let config = fn(node, params, options);\n    let running = true;\n    let animation_name;\n    const group = outros;\n    group.r += 1;\n    function go() {\n        const { delay = 0, duration = 300, easing = identity, tick = noop, css } = config || null_transition;\n        if (css)\n            animation_name = create_rule(node, 1, 0, duration, delay, easing, css);\n        const start_time = now() + delay;\n        const end_time = start_time + duration;\n        add_render_callback(() => dispatch(node, false, 'start'));\n        loop(now => {\n            if (running) {\n                if (now >= end_time) {\n                    tick(0, 1);\n                    dispatch(node, false, 'end');\n                    if (!--group.r) {\n                        // this will result in `end()` being called,\n                        // so we don't need to clean up here\n                        run_all(group.c);\n                    }\n                    return false;\n                }\n                if (now >= start_time) {\n                    const t = easing((now - start_time) / duration);\n                    tick(1 - t, t);\n                }\n            }\n            return running;\n        });\n    }\n    if (is_function(config)) {\n        wait().then(() => {\n            // @ts-ignore\n            config = config(options);\n            go();\n        });\n    }\n    else {\n        go();\n    }\n    return {\n        end(reset) {\n            if (reset && config.tick) {\n                config.tick(1, 0);\n            }\n            if (running) {\n                if (animation_name)\n                    delete_rule(node, animation_name);\n                running = false;\n            }\n        }\n    };\n}\nfunction create_bidirectional_transition(node, fn, params, intro) {\n    const options = { direction: 'both' };\n    let config = fn(node, params, options);\n    let t = intro ? 0 : 1;\n    let running_program = null;\n    let pending_program = null;\n    let animation_name = null;\n    function clear_animation() {\n        if (animation_name)\n            delete_rule(node, animation_name);\n    }\n    function init(program, duration) {\n        const d = (program.b - t);\n        duration *= Math.abs(d);\n        return {\n            a: t,\n            b: program.b,\n            d,\n            duration,\n            start: program.start,\n            end: program.start + duration,\n            group: program.group\n        };\n    }\n    function go(b) {\n        const { delay = 0, duration = 300, easing = identity, tick = noop, css } = config || null_transition;\n        const program = {\n            start: now() + delay,\n            b\n        };\n        if (!b) {\n            // @ts-ignore todo: improve typings\n            program.group = outros;\n            outros.r += 1;\n        }\n        if (running_program || pending_program) {\n            pending_program = program;\n        }\n        else {\n            // if this is an intro, and there's a delay, we need to do\n            // an initial tick and/or apply CSS animation immediately\n            if (css) {\n                clear_animation();\n                animation_name = create_rule(node, t, b, duration, delay, easing, css);\n            }\n            if (b)\n                tick(0, 1);\n            running_program = init(program, duration);\n            add_render_callback(() => dispatch(node, b, 'start'));\n            loop(now => {\n                if (pending_program && now > pending_program.start) {\n                    running_program = init(pending_program, duration);\n                    pending_program = null;\n                    dispatch(node, running_program.b, 'start');\n                    if (css) {\n                        clear_animation();\n                        animation_name = create_rule(node, t, running_program.b, running_program.duration, 0, easing, config.css);\n                    }\n                }\n                if (running_program) {\n                    if (now >= running_program.end) {\n                        tick(t = running_program.b, 1 - t);\n                        dispatch(node, running_program.b, 'end');\n                        if (!pending_program) {\n                            // we're done\n                            if (running_program.b) {\n                                // intro — we can tidy up immediately\n                                clear_animation();\n                            }\n                            else {\n                                // outro — needs to be coordinated\n                                if (!--running_program.group.r)\n                                    run_all(running_program.group.c);\n                            }\n                        }\n                        running_program = null;\n                    }\n                    else if (now >= running_program.start) {\n                        const p = now - running_program.start;\n                        t = running_program.a + running_program.d * easing(p / running_program.duration);\n                        tick(t, 1 - t);\n                    }\n                }\n                return !!(running_program || pending_program);\n            });\n        }\n    }\n    return {\n        run(b) {\n            if (is_function(config)) {\n                wait().then(() => {\n                    // @ts-ignore\n                    config = config(options);\n                    go(b);\n                });\n            }\n            else {\n                go(b);\n            }\n        },\n        end() {\n            clear_animation();\n            running_program = pending_program = null;\n        }\n    };\n}\n\nfunction handle_promise(promise, info) {\n    const token = info.token = {};\n    function update(type, index, key, value) {\n        if (info.token !== token)\n            return;\n        info.resolved = value;\n        let child_ctx = info.ctx;\n        if (key !== undefined) {\n            child_ctx = child_ctx.slice();\n            child_ctx[key] = value;\n        }\n        const block = type && (info.current = type)(child_ctx);\n        let needs_flush = false;\n        if (info.block) {\n            if (info.blocks) {\n                info.blocks.forEach((block, i) => {\n                    if (i !== index && block) {\n                        group_outros();\n                        transition_out(block, 1, 1, () => {\n                            if (info.blocks[i] === block) {\n                                info.blocks[i] = null;\n                            }\n                        });\n                        check_outros();\n                    }\n                });\n            }\n            else {\n                info.block.d(1);\n            }\n            block.c();\n            transition_in(block, 1);\n            block.m(info.mount(), info.anchor);\n            needs_flush = true;\n        }\n        info.block = block;\n        if (info.blocks)\n            info.blocks[index] = block;\n        if (needs_flush) {\n            flush();\n        }\n    }\n    if (is_promise(promise)) {\n        const current_component = get_current_component();\n        promise.then(value => {\n            set_current_component(current_component);\n            update(info.then, 1, info.value, value);\n            set_current_component(null);\n        }, error => {\n            set_current_component(current_component);\n            update(info.catch, 2, info.error, error);\n            set_current_component(null);\n            if (!info.hasCatch) {\n                throw error;\n            }\n        });\n        // if we previously had a then/catch block, destroy it\n        if (info.current !== info.pending) {\n            update(info.pending, 0);\n            return true;\n        }\n    }\n    else {\n        if (info.current !== info.then) {\n            update(info.then, 1, info.value, promise);\n            return true;\n        }\n        info.resolved = promise;\n    }\n}\nfunction update_await_block_branch(info, ctx, dirty) {\n    const child_ctx = ctx.slice();\n    const { resolved } = info;\n    if (info.current === info.then) {\n        child_ctx[info.value] = resolved;\n    }\n    if (info.current === info.catch) {\n        child_ctx[info.error] = resolved;\n    }\n    info.block.p(child_ctx, dirty);\n}\n\nconst globals = (typeof window !== 'undefined'\n    ? window\n    : typeof globalThis !== 'undefined'\n        ? globalThis\n        : global);\n\nfunction destroy_block(block, lookup) {\n    block.d(1);\n    lookup.delete(block.key);\n}\nfunction outro_and_destroy_block(block, lookup) {\n    transition_out(block, 1, 1, () => {\n        lookup.delete(block.key);\n    });\n}\nfunction fix_and_destroy_block(block, lookup) {\n    block.f();\n    destroy_block(block, lookup);\n}\nfunction fix_and_outro_and_destroy_block(block, lookup) {\n    block.f();\n    outro_and_destroy_block(block, lookup);\n}\nfunction update_keyed_each(old_blocks, dirty, get_key, dynamic, ctx, list, lookup, node, destroy, create_each_block, next, get_context) {\n    let o = old_blocks.length;\n    let n = list.length;\n    let i = o;\n    const old_indexes = {};\n    while (i--)\n        old_indexes[old_blocks[i].key] = i;\n    const new_blocks = [];\n    const new_lookup = new Map();\n    const deltas = new Map();\n    i = n;\n    while (i--) {\n        const child_ctx = get_context(ctx, list, i);\n        const key = get_key(child_ctx);\n        let block = lookup.get(key);\n        if (!block) {\n            block = create_each_block(key, child_ctx);\n            block.c();\n        }\n        else if (dynamic) {\n            block.p(child_ctx, dirty);\n        }\n        new_lookup.set(key, new_blocks[i] = block);\n        if (key in old_indexes)\n            deltas.set(key, Math.abs(i - old_indexes[key]));\n    }\n    const will_move = new Set();\n    const did_move = new Set();\n    function insert(block) {\n        transition_in(block, 1);\n        block.m(node, next);\n        lookup.set(block.key, block);\n        next = block.first;\n        n--;\n    }\n    while (o && n) {\n        const new_block = new_blocks[n - 1];\n        const old_block = old_blocks[o - 1];\n        const new_key = new_block.key;\n        const old_key = old_block.key;\n        if (new_block === old_block) {\n            // do nothing\n            next = new_block.first;\n            o--;\n            n--;\n        }\n        else if (!new_lookup.has(old_key)) {\n            // remove old block\n            destroy(old_block, lookup);\n            o--;\n        }\n        else if (!lookup.has(new_key) || will_move.has(new_key)) {\n            insert(new_block);\n        }\n        else if (did_move.has(old_key)) {\n            o--;\n        }\n        else if (deltas.get(new_key) > deltas.get(old_key)) {\n            did_move.add(new_key);\n            insert(new_block);\n        }\n        else {\n            will_move.add(old_key);\n            o--;\n        }\n    }\n    while (o--) {\n        const old_block = old_blocks[o];\n        if (!new_lookup.has(old_block.key))\n            destroy(old_block, lookup);\n    }\n    while (n)\n        insert(new_blocks[n - 1]);\n    return new_blocks;\n}\nfunction validate_each_keys(ctx, list, get_context, get_key) {\n    const keys = new Set();\n    for (let i = 0; i < list.length; i++) {\n        const key = get_key(get_context(ctx, list, i));\n        if (keys.has(key)) {\n            throw new Error('Cannot have duplicate keys in a keyed each');\n        }\n        keys.add(key);\n    }\n}\n\nfunction get_spread_update(levels, updates) {\n    const update = {};\n    const to_null_out = {};\n    const accounted_for = { $$scope: 1 };\n    let i = levels.length;\n    while (i--) {\n        const o = levels[i];\n        const n = updates[i];\n        if (n) {\n            for (const key in o) {\n                if (!(key in n))\n                    to_null_out[key] = 1;\n            }\n            for (const key in n) {\n                if (!accounted_for[key]) {\n                    update[key] = n[key];\n                    accounted_for[key] = 1;\n                }\n            }\n            levels[i] = n;\n        }\n        else {\n            for (const key in o) {\n                accounted_for[key] = 1;\n            }\n        }\n    }\n    for (const key in to_null_out) {\n        if (!(key in update))\n            update[key] = undefined;\n    }\n    return update;\n}\nfunction get_spread_object(spread_props) {\n    return typeof spread_props === 'object' && spread_props !== null ? spread_props : {};\n}\n\n// source: https://html.spec.whatwg.org/multipage/indices.html\nconst boolean_attributes = new Set([\n    'allowfullscreen',\n    'allowpaymentrequest',\n    'async',\n    'autofocus',\n    'autoplay',\n    'checked',\n    'controls',\n    'default',\n    'defer',\n    'disabled',\n    'formnovalidate',\n    'hidden',\n    'inert',\n    'ismap',\n    'itemscope',\n    'loop',\n    'multiple',\n    'muted',\n    'nomodule',\n    'novalidate',\n    'open',\n    'playsinline',\n    'readonly',\n    'required',\n    'reversed',\n    'selected'\n]);\n\n/** regex of all html void element names */\nconst void_element_names = /^(?:area|base|br|col|command|embed|hr|img|input|keygen|link|meta|param|source|track|wbr)$/;\nfunction is_void(name) {\n    return void_element_names.test(name) || name.toLowerCase() === '!doctype';\n}\n\nconst invalid_attribute_name_character = /[\\s'\">/=\\u{FDD0}-\\u{FDEF}\\u{FFFE}\\u{FFFF}\\u{1FFFE}\\u{1FFFF}\\u{2FFFE}\\u{2FFFF}\\u{3FFFE}\\u{3FFFF}\\u{4FFFE}\\u{4FFFF}\\u{5FFFE}\\u{5FFFF}\\u{6FFFE}\\u{6FFFF}\\u{7FFFE}\\u{7FFFF}\\u{8FFFE}\\u{8FFFF}\\u{9FFFE}\\u{9FFFF}\\u{AFFFE}\\u{AFFFF}\\u{BFFFE}\\u{BFFFF}\\u{CFFFE}\\u{CFFFF}\\u{DFFFE}\\u{DFFFF}\\u{EFFFE}\\u{EFFFF}\\u{FFFFE}\\u{FFFFF}\\u{10FFFE}\\u{10FFFF}]/u;\n// https://html.spec.whatwg.org/multipage/syntax.html#attributes-2\n// https://infra.spec.whatwg.org/#noncharacter\nfunction spread(args, attrs_to_add) {\n    const attributes = Object.assign({}, ...args);\n    if (attrs_to_add) {\n        const classes_to_add = attrs_to_add.classes;\n        const styles_to_add = attrs_to_add.styles;\n        if (classes_to_add) {\n            if (attributes.class == null) {\n                attributes.class = classes_to_add;\n            }\n            else {\n                attributes.class += ' ' + classes_to_add;\n            }\n        }\n        if (styles_to_add) {\n            if (attributes.style == null) {\n                attributes.style = style_object_to_string(styles_to_add);\n            }\n            else {\n                attributes.style = style_object_to_string(merge_ssr_styles(attributes.style, styles_to_add));\n            }\n        }\n    }\n    let str = '';\n    Object.keys(attributes).forEach(name => {\n        if (invalid_attribute_name_character.test(name))\n            return;\n        const value = attributes[name];\n        if (value === true)\n            str += ' ' + name;\n        else if (boolean_attributes.has(name.toLowerCase())) {\n            if (value)\n                str += ' ' + name;\n        }\n        else if (value != null) {\n            str += ` ${name}=\"${value}\"`;\n        }\n    });\n    return str;\n}\nfunction merge_ssr_styles(style_attribute, style_directive) {\n    const style_object = {};\n    for (const individual_style of style_attribute.split(';')) {\n        const colon_index = individual_style.indexOf(':');\n        const name = individual_style.slice(0, colon_index).trim();\n        const value = individual_style.slice(colon_index + 1).trim();\n        if (!name)\n            continue;\n        style_object[name] = value;\n    }\n    for (const name in style_directive) {\n        const value = style_directive[name];\n        if (value) {\n            style_object[name] = value;\n        }\n        else {\n            delete style_object[name];\n        }\n    }\n    return style_object;\n}\nconst ATTR_REGEX = /[&\"]/g;\nconst CONTENT_REGEX = /[&<]/g;\n/**\n * Note: this method is performance sensitive and has been optimized\n * https://github.com/sveltejs/svelte/pull/5701\n */\nfunction escape(value, is_attr = false) {\n    const str = String(value);\n    const pattern = is_attr ? ATTR_REGEX : CONTENT_REGEX;\n    pattern.lastIndex = 0;\n    let escaped = '';\n    let last = 0;\n    while (pattern.test(str)) {\n        const i = pattern.lastIndex - 1;\n        const ch = str[i];\n        escaped += str.substring(last, i) + (ch === '&' ? '&amp;' : (ch === '\"' ? '&quot;' : '&lt;'));\n        last = i + 1;\n    }\n    return escaped + str.substring(last);\n}\nfunction escape_attribute_value(value) {\n    // keep booleans, null, and undefined for the sake of `spread`\n    const should_escape = typeof value === 'string' || (value && typeof value === 'object');\n    return should_escape ? escape(value, true) : value;\n}\nfunction escape_object(obj) {\n    const result = {};\n    for (const key in obj) {\n        result[key] = escape_attribute_value(obj[key]);\n    }\n    return result;\n}\nfunction each(items, fn) {\n    let str = '';\n    for (let i = 0; i < items.length; i += 1) {\n        str += fn(items[i], i);\n    }\n    return str;\n}\nconst missing_component = {\n    $$render: () => ''\n};\nfunction validate_component(component, name) {\n    if (!component || !component.$$render) {\n        if (name === 'svelte:component')\n            name += ' this={...}';\n        throw new Error(`<${name}> is not a valid SSR component. You may need to review your build config to ensure that dependencies are compiled, rather than imported as pre-compiled modules. Otherwise you may need to fix a <${name}>.`);\n    }\n    return component;\n}\nfunction debug(file, line, column, values) {\n    console.log(`{@debug} ${file ? file + ' ' : ''}(${line}:${column})`); // eslint-disable-line no-console\n    console.log(values); // eslint-disable-line no-console\n    return '';\n}\nlet on_destroy;\nfunction create_ssr_component(fn) {\n    function $$render(result, props, bindings, slots, context) {\n        const parent_component = current_component;\n        const $$ = {\n            on_destroy,\n            context: new Map(context || (parent_component ? parent_component.$$.context : [])),\n            // these will be immediately discarded\n            on_mount: [],\n            before_update: [],\n            after_update: [],\n            callbacks: blank_object()\n        };\n        set_current_component({ $$ });\n        const html = fn(result, props, bindings, slots);\n        set_current_component(parent_component);\n        return html;\n    }\n    return {\n        render: (props = {}, { $$slots = {}, context = new Map() } = {}) => {\n            on_destroy = [];\n            const result = { title: '', head: '', css: new Set() };\n            const html = $$render(result, props, {}, $$slots, context);\n            run_all(on_destroy);\n            return {\n                html,\n                css: {\n                    code: Array.from(result.css).map(css => css.code).join('\\n'),\n                    map: null // TODO\n                },\n                head: result.title + result.head\n            };\n        },\n        $$render\n    };\n}\nfunction add_attribute(name, value, boolean) {\n    if (value == null || (boolean && !value))\n        return '';\n    const assignment = (boolean && value === true) ? '' : `=\"${escape(value, true)}\"`;\n    return ` ${name}${assignment}`;\n}\nfunction add_classes(classes) {\n    return classes ? ` class=\"${classes}\"` : '';\n}\nfunction style_object_to_string(style_object) {\n    return Object.keys(style_object)\n        .filter(key => style_object[key])\n        .map(key => `${key}: ${escape_attribute_value(style_object[key])};`)\n        .join(' ');\n}\nfunction add_styles(style_object) {\n    const styles = style_object_to_string(style_object);\n    return styles ? ` style=\"${styles}\"` : '';\n}\n\nfunction bind(component, name, callback) {\n    const index = component.$$.props[name];\n    if (index !== undefined) {\n        component.$$.bound[index] = callback;\n        callback(component.$$.ctx[index]);\n    }\n}\nfunction create_component(block) {\n    block && block.c();\n}\nfunction claim_component(block, parent_nodes) {\n    block && block.l(parent_nodes);\n}\nfunction mount_component(component, target, anchor, customElement) {\n    const { fragment, after_update } = component.$$;\n    fragment && fragment.m(target, anchor);\n    if (!customElement) {\n        // onMount happens before the initial afterUpdate\n        add_render_callback(() => {\n            const new_on_destroy = component.$$.on_mount.map(run).filter(is_function);\n            // if the component was destroyed immediately\n            // it will update the `$$.on_destroy` reference to `null`.\n            // the destructured on_destroy may still reference to the old array\n            if (component.$$.on_destroy) {\n                component.$$.on_destroy.push(...new_on_destroy);\n            }\n            else {\n                // Edge case - component was destroyed immediately,\n                // most likely as a result of a binding initialising\n                run_all(new_on_destroy);\n            }\n            component.$$.on_mount = [];\n        });\n    }\n    after_update.forEach(add_render_callback);\n}\nfunction destroy_component(component, detaching) {\n    const $$ = component.$$;\n    if ($$.fragment !== null) {\n        run_all($$.on_destroy);\n        $$.fragment && $$.fragment.d(detaching);\n        // TODO null out other refs, including component.$$ (but need to\n        // preserve final state?)\n        $$.on_destroy = $$.fragment = null;\n        $$.ctx = [];\n    }\n}\nfunction make_dirty(component, i) {\n    if (component.$$.dirty[0] === -1) {\n        dirty_components.push(component);\n        schedule_update();\n        component.$$.dirty.fill(0);\n    }\n    component.$$.dirty[(i / 31) | 0] |= (1 << (i % 31));\n}\nfunction init(component, options, instance, create_fragment, not_equal, props, append_styles, dirty = [-1]) {\n    const parent_component = current_component;\n    set_current_component(component);\n    const $$ = component.$$ = {\n        fragment: null,\n        ctx: [],\n        // state\n        props,\n        update: noop,\n        not_equal,\n        bound: blank_object(),\n        // lifecycle\n        on_mount: [],\n        on_destroy: [],\n        on_disconnect: [],\n        before_update: [],\n        after_update: [],\n        context: new Map(options.context || (parent_component ? parent_component.$$.context : [])),\n        // everything else\n        callbacks: blank_object(),\n        dirty,\n        skip_bound: false,\n        root: options.target || parent_component.$$.root\n    };\n    append_styles && append_styles($$.root);\n    let ready = false;\n    $$.ctx = instance\n        ? instance(component, options.props || {}, (i, ret, ...rest) => {\n            const value = rest.length ? rest[0] : ret;\n            if ($$.ctx && not_equal($$.ctx[i], $$.ctx[i] = value)) {\n                if (!$$.skip_bound && $$.bound[i])\n                    $$.bound[i](value);\n                if (ready)\n                    make_dirty(component, i);\n            }\n            return ret;\n        })\n        : [];\n    $$.update();\n    ready = true;\n    run_all($$.before_update);\n    // `false` as a special case of no DOM component\n    $$.fragment = create_fragment ? create_fragment($$.ctx) : false;\n    if (options.target) {\n        if (options.hydrate) {\n            start_hydrating();\n            const nodes = children(options.target);\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n            $$.fragment && $$.fragment.l(nodes);\n            nodes.forEach(detach);\n        }\n        else {\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n            $$.fragment && $$.fragment.c();\n        }\n        if (options.intro)\n            transition_in(component.$$.fragment);\n        mount_component(component, options.target, options.anchor, options.customElement);\n        end_hydrating();\n        flush();\n    }\n    set_current_component(parent_component);\n}\nlet SvelteElement;\nif (typeof HTMLElement === 'function') {\n    SvelteElement = class extends HTMLElement {\n        constructor() {\n            super();\n            this.attachShadow({ mode: 'open' });\n        }\n        connectedCallback() {\n            const { on_mount } = this.$$;\n            this.$$.on_disconnect = on_mount.map(run).filter(is_function);\n            // @ts-ignore todo: improve typings\n            for (const key in this.$$.slotted) {\n                // @ts-ignore todo: improve typings\n                this.appendChild(this.$$.slotted[key]);\n            }\n        }\n        attributeChangedCallback(attr, _oldValue, newValue) {\n            this[attr] = newValue;\n        }\n        disconnectedCallback() {\n            run_all(this.$$.on_disconnect);\n        }\n        $destroy() {\n            destroy_component(this, 1);\n            this.$destroy = noop;\n        }\n        $on(type, callback) {\n            // TODO should this delegate to addEventListener?\n            if (!is_function(callback)) {\n                return noop;\n            }\n            const callbacks = (this.$$.callbacks[type] || (this.$$.callbacks[type] = []));\n            callbacks.push(callback);\n            return () => {\n                const index = callbacks.indexOf(callback);\n                if (index !== -1)\n                    callbacks.splice(index, 1);\n            };\n        }\n        $set($$props) {\n            if (this.$$set && !is_empty($$props)) {\n                this.$$.skip_bound = true;\n                this.$$set($$props);\n                this.$$.skip_bound = false;\n            }\n        }\n    };\n}\n/**\n * Base class for Svelte components. Used when dev=false.\n */\nclass SvelteComponent {\n    $destroy() {\n        destroy_component(this, 1);\n        this.$destroy = noop;\n    }\n    $on(type, callback) {\n        if (!is_function(callback)) {\n            return noop;\n        }\n        const callbacks = (this.$$.callbacks[type] || (this.$$.callbacks[type] = []));\n        callbacks.push(callback);\n        return () => {\n            const index = callbacks.indexOf(callback);\n            if (index !== -1)\n                callbacks.splice(index, 1);\n        };\n    }\n    $set($$props) {\n        if (this.$$set && !is_empty($$props)) {\n            this.$$.skip_bound = true;\n            this.$$set($$props);\n            this.$$.skip_bound = false;\n        }\n    }\n}\n\nfunction dispatch_dev(type, detail) {\n    document.dispatchEvent(custom_event(type, Object.assign({ version: '3.55.1' }, detail), { bubbles: true }));\n}\nfunction append_dev(target, node) {\n    dispatch_dev('SvelteDOMInsert', { target, node });\n    append(target, node);\n}\nfunction append_hydration_dev(target, node) {\n    dispatch_dev('SvelteDOMInsert', { target, node });\n    append_hydration(target, node);\n}\nfunction insert_dev(target, node, anchor) {\n    dispatch_dev('SvelteDOMInsert', { target, node, anchor });\n    insert(target, node, anchor);\n}\nfunction insert_hydration_dev(target, node, anchor) {\n    dispatch_dev('SvelteDOMInsert', { target, node, anchor });\n    insert_hydration(target, node, anchor);\n}\nfunction detach_dev(node) {\n    dispatch_dev('SvelteDOMRemove', { node });\n    detach(node);\n}\nfunction detach_between_dev(before, after) {\n    while (before.nextSibling && before.nextSibling !== after) {\n        detach_dev(before.nextSibling);\n    }\n}\nfunction detach_before_dev(after) {\n    while (after.previousSibling) {\n        detach_dev(after.previousSibling);\n    }\n}\nfunction detach_after_dev(before) {\n    while (before.nextSibling) {\n        detach_dev(before.nextSibling);\n    }\n}\nfunction listen_dev(node, event, handler, options, has_prevent_default, has_stop_propagation) {\n    const modifiers = options === true ? ['capture'] : options ? Array.from(Object.keys(options)) : [];\n    if (has_prevent_default)\n        modifiers.push('preventDefault');\n    if (has_stop_propagation)\n        modifiers.push('stopPropagation');\n    dispatch_dev('SvelteDOMAddEventListener', { node, event, handler, modifiers });\n    const dispose = listen(node, event, handler, options);\n    return () => {\n        dispatch_dev('SvelteDOMRemoveEventListener', { node, event, handler, modifiers });\n        dispose();\n    };\n}\nfunction attr_dev(node, attribute, value) {\n    attr(node, attribute, value);\n    if (value == null)\n        dispatch_dev('SvelteDOMRemoveAttribute', { node, attribute });\n    else\n        dispatch_dev('SvelteDOMSetAttribute', { node, attribute, value });\n}\nfunction prop_dev(node, property, value) {\n    node[property] = value;\n    dispatch_dev('SvelteDOMSetProperty', { node, property, value });\n}\nfunction dataset_dev(node, property, value) {\n    node.dataset[property] = value;\n    dispatch_dev('SvelteDOMSetDataset', { node, property, value });\n}\nfunction set_data_dev(text, data) {\n    data = '' + data;\n    if (text.wholeText === data)\n        return;\n    dispatch_dev('SvelteDOMSetData', { node: text, data });\n    text.data = data;\n}\nfunction validate_each_argument(arg) {\n    if (typeof arg !== 'string' && !(arg && typeof arg === 'object' && 'length' in arg)) {\n        let msg = '{#each} only iterates over array-like objects.';\n        if (typeof Symbol === 'function' && arg && Symbol.iterator in arg) {\n            msg += ' You can use a spread to convert this iterable into an array.';\n        }\n        throw new Error(msg);\n    }\n}\nfunction validate_slots(name, slot, keys) {\n    for (const slot_key of Object.keys(slot)) {\n        if (!~keys.indexOf(slot_key)) {\n            console.warn(`<${name}> received an unexpected slot \"${slot_key}\".`);\n        }\n    }\n}\nfunction validate_dynamic_element(tag) {\n    const is_string = typeof tag === 'string';\n    if (tag && !is_string) {\n        throw new Error('<svelte:element> expects \"this\" attribute to be a string.');\n    }\n}\nfunction validate_void_dynamic_element(tag) {\n    if (tag && is_void(tag)) {\n        console.warn(`<svelte:element this=\"${tag}\"> is self-closing and cannot have content.`);\n    }\n}\nfunction construct_svelte_component_dev(component, props) {\n    const error_message = 'this={...} of <svelte:component> should specify a Svelte component.';\n    try {\n        const instance = new component(props);\n        if (!instance.$$ || !instance.$set || !instance.$on || !instance.$destroy) {\n            throw new Error(error_message);\n        }\n        return instance;\n    }\n    catch (err) {\n        const { message } = err;\n        if (typeof message === 'string' && message.indexOf('is not a constructor') !== -1) {\n            throw new Error(error_message);\n        }\n        else {\n            throw err;\n        }\n    }\n}\n/**\n * Base class for Svelte components with some minor dev-enhancements. Used when dev=true.\n */\nclass SvelteComponentDev extends SvelteComponent {\n    constructor(options) {\n        if (!options || (!options.target && !options.$$inline)) {\n            throw new Error(\"'target' is a required option\");\n        }\n        super();\n    }\n    $destroy() {\n        super.$destroy();\n        this.$destroy = () => {\n            console.warn('Component was already destroyed'); // eslint-disable-line no-console\n        };\n    }\n    $capture_state() { }\n    $inject_state() { }\n}\n/**\n * Base class to create strongly typed Svelte components.\n * This only exists for typing purposes and should be used in `.d.ts` files.\n *\n * ### Example:\n *\n * You have component library on npm called `component-library`, from which\n * you export a component called `MyComponent`. For Svelte+TypeScript users,\n * you want to provide typings. Therefore you create a `index.d.ts`:\n * ```ts\n * import { SvelteComponentTyped } from \"svelte\";\n * export class MyComponent extends SvelteComponentTyped<{foo: string}> {}\n * ```\n * Typing this makes it possible for IDEs like VS Code with the Svelte extension\n * to provide intellisense and to use the component like this in a Svelte file\n * with TypeScript:\n * ```svelte\n * <script lang=\"ts\">\n * \timport { MyComponent } from \"component-library\";\n * </script>\n * <MyComponent foo={'bar'} />\n * ```\n *\n * #### Why not make this part of `SvelteComponent(Dev)`?\n * Because\n * ```ts\n * class ASubclassOfSvelteComponent extends SvelteComponent<{foo: string}> {}\n * const component: typeof SvelteComponent = ASubclassOfSvelteComponent;\n * ```\n * will throw a type error, so we need to separate the more strictly typed class.\n */\nclass SvelteComponentTyped extends SvelteComponentDev {\n    constructor(options) {\n        super(options);\n    }\n}\nfunction loop_guard(timeout) {\n    const start = Date.now();\n    return () => {\n        if (Date.now() - start > timeout) {\n            throw new Error('Infinite loop detected');\n        }\n    };\n}\n\nexport { HtmlTag, HtmlTagHydration, SvelteComponent, SvelteComponentDev, SvelteComponentTyped, SvelteElement, action_destroyer, add_attribute, add_classes, add_flush_callback, add_location, add_render_callback, add_resize_listener, add_styles, add_transform, afterUpdate, append, append_dev, append_empty_stylesheet, append_hydration, append_hydration_dev, append_styles, assign, attr, attr_dev, attribute_to_object, beforeUpdate, bind, binding_callbacks, blank_object, bubble, check_outros, children, claim_component, claim_element, claim_html_tag, claim_space, claim_svg_element, claim_text, clear_loops, component_subscribe, compute_rest_props, compute_slots, construct_svelte_component, construct_svelte_component_dev, createEventDispatcher, create_animation, create_bidirectional_transition, create_component, create_in_transition, create_out_transition, create_slot, create_ssr_component, current_component, custom_event, dataset_dev, debug, destroy_block, destroy_component, destroy_each, detach, detach_after_dev, detach_before_dev, detach_between_dev, detach_dev, dirty_components, dispatch_dev, each, element, element_is, empty, end_hydrating, escape, escape_attribute_value, escape_object, exclude_internal_props, fix_and_destroy_block, fix_and_outro_and_destroy_block, fix_position, flush, getAllContexts, getContext, get_all_dirty_from_scope, get_binding_group_value, get_current_component, get_custom_elements_slots, get_root_for_style, get_slot_changes, get_spread_object, get_spread_update, get_store_value, globals, group_outros, handle_promise, hasContext, has_prop, head_selector, identity, init, insert, insert_dev, insert_hydration, insert_hydration_dev, intros, invalid_attribute_name_character, is_client, is_crossorigin, is_empty, is_function, is_promise, is_void, listen, listen_dev, loop, loop_guard, merge_ssr_styles, missing_component, mount_component, noop, not_equal, now, null_to_empty, object_without_properties, onDestroy, onMount, once, outro_and_destroy_block, prevent_default, prop_dev, query_selector_all, raf, run, run_all, safe_not_equal, schedule_update, select_multiple_value, select_option, select_options, select_value, self, setContext, set_attributes, set_current_component, set_custom_element_data, set_custom_element_data_map, set_data, set_data_dev, set_input_type, set_input_value, set_now, set_raf, set_store_value, set_style, set_svg_attributes, space, spread, src_url_equal, start_hydrating, stop_propagation, subscribe, svg_element, text, tick, time_ranges_to_array, to_number, toggle_class, transition_in, transition_out, trusted, update_await_block_branch, update_keyed_each, update_slot, update_slot_base, validate_component, validate_dynamic_element, validate_each_argument, validate_each_keys, validate_slots, validate_store, validate_void_dynamic_element, xlink_attr };\n","import { noop, safe_not_equal, subscribe, run_all, is_function } from '../internal/index.mjs';\nexport { get_store_value as get } from '../internal/index.mjs';\n\nconst subscriber_queue = [];\n/**\n * Creates a `Readable` store that allows reading by subscription.\n * @param value initial value\n * @param {StartStopNotifier}start start and stop notifications for subscriptions\n */\nfunction readable(value, start) {\n    return {\n        subscribe: writable(value, start).subscribe\n    };\n}\n/**\n * Create a `Writable` store that allows both updating and reading by subscription.\n * @param {*=}value initial value\n * @param {StartStopNotifier=}start start and stop notifications for subscriptions\n */\nfunction writable(value, start = noop) {\n    let stop;\n    const subscribers = new Set();\n    function set(new_value) {\n        if (safe_not_equal(value, new_value)) {\n            value = new_value;\n            if (stop) { // store is ready\n                const run_queue = !subscriber_queue.length;\n                for (const subscriber of subscribers) {\n                    subscriber[1]();\n                    subscriber_queue.push(subscriber, value);\n                }\n                if (run_queue) {\n                    for (let i = 0; i < subscriber_queue.length; i += 2) {\n                        subscriber_queue[i][0](subscriber_queue[i + 1]);\n                    }\n                    subscriber_queue.length = 0;\n                }\n            }\n        }\n    }\n    function update(fn) {\n        set(fn(value));\n    }\n    function subscribe(run, invalidate = noop) {\n        const subscriber = [run, invalidate];\n        subscribers.add(subscriber);\n        if (subscribers.size === 1) {\n            stop = start(set) || noop;\n        }\n        run(value);\n        return () => {\n            subscribers.delete(subscriber);\n            if (subscribers.size === 0) {\n                stop();\n                stop = null;\n            }\n        };\n    }\n    return { set, update, subscribe };\n}\nfunction derived(stores, fn, initial_value) {\n    const single = !Array.isArray(stores);\n    const stores_array = single\n        ? [stores]\n        : stores;\n    const auto = fn.length < 2;\n    return readable(initial_value, (set) => {\n        let inited = false;\n        const values = [];\n        let pending = 0;\n        let cleanup = noop;\n        const sync = () => {\n            if (pending) {\n                return;\n            }\n            cleanup();\n            const result = fn(single ? values[0] : values, set);\n            if (auto) {\n                set(result);\n            }\n            else {\n                cleanup = is_function(result) ? result : noop;\n            }\n        };\n        const unsubscribers = stores_array.map((store, i) => subscribe(store, (value) => {\n            values[i] = value;\n            pending &= ~(1 << i);\n            if (inited) {\n                sync();\n            }\n        }, () => {\n            pending |= (1 << i);\n        }));\n        inited = true;\n        sync();\n        return function stop() {\n            run_all(unsubscribers);\n            cleanup();\n        };\n    });\n}\n\nexport { derived, readable, writable };\n","export function parse(str, loose) {\n\tif (str instanceof RegExp) return { keys:false, pattern:str };\n\tvar c, o, tmp, ext, keys=[], pattern='', arr = str.split('/');\n\tarr[0] || arr.shift();\n\n\twhile (tmp = arr.shift()) {\n\t\tc = tmp[0];\n\t\tif (c === '*') {\n\t\t\tkeys.push('wild');\n\t\t\tpattern += '/(.*)';\n\t\t} else if (c === ':') {\n\t\t\to = tmp.indexOf('?', 1);\n\t\t\text = tmp.indexOf('.', 1);\n\t\t\tkeys.push( tmp.substring(1, !!~o ? o : !!~ext ? ext : tmp.length) );\n\t\t\tpattern += !!~o && !~ext ? '(?:/([^/]+?))?' : '/([^/]+?)';\n\t\t\tif (!!~ext) pattern += (!!~o ? '?' : '') + '\\\\' + tmp.substring(ext);\n\t\t} else {\n\t\t\tpattern += '/' + tmp;\n\t\t}\n\t}\n\n\treturn {\n\t\tkeys: keys,\n\t\tpattern: new RegExp('^' + pattern + (loose ? '(?=$|\\/)' : '\\/?$'), 'i')\n\t};\n}\n\nvar RGX = /*#__PURE__*/ /(\\/|^)([:*][^/]*?)(\\?)?(?=[/.]|$)/g;\n\n// error if key missing?\nexport function inject(route, values) {\n\treturn route.replace(RGX, (x, lead, key, optional) => {\n\t\tx = values[key=='*' ? 'wild' : key.substring(1)];\n\t\treturn x ? '/'+x : (optional || key=='*') ? '' : '/' + key;\n\t});\n}\n","<script context=\"module\">\nimport {readable, writable, derived} from 'svelte/store'\nimport {tick} from 'svelte'\nimport {wrap as _wrap} from './wrap'\n\n/**\n * Wraps a component to add route pre-conditions.\n * @deprecated Use `wrap` from `svelte-spa-router/wrap` instead. This function will be removed in a later version.\n * \n * @param {SvelteComponent} component - Svelte component for the route\n * @param {object} [userData] - Optional object that will be passed to each `conditionsFailed` event\n * @param {...function(RouteDetail): boolean} conditions - Route pre-conditions to add, which will be executed in order\n * @returns {WrappedComponent} Wrapped component\n */\nexport function wrap(component, userData, ...conditions) {\n    // Use the new wrap method and show a deprecation warning\n    // eslint-disable-next-line no-console\n    console.warn('Method `wrap` from `svelte-spa-router` is deprecated and will be removed in a future version. Please use `svelte-spa-router/wrap` instead. See http://bit.ly/svelte-spa-router-upgrading')\n    return _wrap({\n        component,\n        userData,\n        conditions\n    })\n}\n\n/**\n * @typedef {Object} Location\n * @property {string} location - Location (page/view), for example `/book`\n * @property {string} [querystring] - Querystring from the hash, as a string not parsed\n */\n/**\n * Returns the current location from the hash.\n *\n * @returns {Location} Location object\n * @private\n */\nfunction getLocation() {\n    const hashPosition = window.location.href.indexOf('#/')\n    let location = (hashPosition > -1) ? window.location.href.substr(hashPosition + 1) : '/'\n\n    // Check if there's a querystring\n    const qsPosition = location.indexOf('?')\n    let querystring = ''\n    if (qsPosition > -1) {\n        querystring = location.substr(qsPosition + 1)\n        location = location.substr(0, qsPosition)\n    }\n\n    return {location, querystring}\n}\n\n/**\n * Readable store that returns the current full location (incl. querystring)\n */\nexport const loc = readable(\n    null,\n    // eslint-disable-next-line prefer-arrow-callback\n    function start(set) {\n        set(getLocation())\n\n        const update = () => {\n            set(getLocation())\n        }\n        window.addEventListener('hashchange', update, false)\n\n        return function stop() {\n            window.removeEventListener('hashchange', update, false)\n        }\n    }\n)\n\n/**\n * Readable store that returns the current location\n */\nexport const location = derived(\n    loc,\n    ($loc) => $loc.location\n)\n\n/**\n * Readable store that returns the current querystring\n */\nexport const querystring = derived(\n    loc,\n    ($loc) => $loc.querystring\n)\n\n/**\n * Store that returns the currently-matched params.\n * Despite this being writable, consumers should not change the value of the store.\n * It is exported as a readable store only (in the typings file)\n */\nexport const params = writable(undefined)\n\n/**\n * Navigates to a new page programmatically.\n *\n * @param {string} location - Path to navigate to (must start with `/` or '#/')\n * @return {Promise<void>} Promise that resolves after the page navigation has completed\n */\nexport async function push(location) {\n    if (!location || location.length < 1 || (location.charAt(0) != '/' && location.indexOf('#/') !== 0)) {\n        throw Error('Invalid parameter location')\n    }\n\n    // Execute this code when the current call stack is complete\n    await tick()\n\n    // Note: this will include scroll state in history even when restoreScrollState is false\n    history.replaceState({...history.state, __svelte_spa_router_scrollX: window.scrollX, __svelte_spa_router_scrollY: window.scrollY}, undefined)      \n    window.location.hash = (location.charAt(0) == '#' ? '' : '#') + location\n}\n\n/**\n * Navigates back in history (equivalent to pressing the browser's back button).\n * \n * @return {Promise<void>} Promise that resolves after the page navigation has completed\n */\nexport async function pop() {\n    // Execute this code when the current call stack is complete\n    await tick()\n\n    window.history.back()\n}\n\n/**\n * Replaces the current page but without modifying the history stack.\n *\n * @param {string} location - Path to navigate to (must start with `/` or '#/')\n * @return {Promise<void>} Promise that resolves after the page navigation has completed\n */\nexport async function replace(location) {\n    if (!location || location.length < 1 || (location.charAt(0) != '/' && location.indexOf('#/') !== 0)) {\n        throw Error('Invalid parameter location')\n    }\n\n    // Execute this code when the current call stack is complete\n    await tick()\n\n    const dest = (location.charAt(0) == '#' ? '' : '#') + location\n    try {\n        const newState = {\n            ...history.state\n        }\n        delete newState['__svelte_spa_router_scrollX']\n        delete newState['__svelte_spa_router_scrollY']\n        window.history.replaceState(newState, undefined, dest)\n    }\n    catch (e) {\n        // eslint-disable-next-line no-console\n        console.warn('Caught exception while replacing the current page. If you\\'re running this in the Svelte REPL, please note that the `replace` method might not work in this environment.')\n    }\n\n    // The method above doesn't trigger the hashchange event, so let's do that manually\n    window.dispatchEvent(new Event('hashchange'))\n}\n\n/**\n * Dictionary with options for the link action.\n * @typedef {Object} LinkActionOpts\n * @property {string} href - A string to use in place of the link's href attribute. Using this allows for updating link's targets reactively.\n * @property {boolean} disabled - If true, link is disabled\n */\n\n/**\n * Svelte Action that enables a link element (`<a>`) to use our history management.\n *\n * For example:\n *\n * ````html\n * <a href=\"/books\" use:link>View books</a>\n * ````\n *\n * @param {HTMLElement} node - The target node (automatically set by Svelte). Must be an anchor tag (`<a>`) with a href attribute starting in `/`\n * @param {string|LinkActionOpts} opts - Options object. For legacy reasons, we support a string too which will be the value for opts.href\n */\nexport function link(node, opts) {\n    opts = linkOpts(opts)\n\n    // Only apply to <a> tags\n    if (!node || !node.tagName || node.tagName.toLowerCase() != 'a') {\n        throw Error('Action \"link\" can only be used with <a> tags')\n    }\n\n    updateLink(node, opts)\n\n    return {\n        update(updated) {\n            updated = linkOpts(updated)\n            updateLink(node, updated)\n        }\n    }\n}\n\n/**\n * Tries to restore the scroll state from the given history state.\n *\n * @param {{__svelte_spa_router_scrollX: number, __svelte_spa_router_scrollY: number}} [state] - The history state to restore from.\n */\nexport function restoreScroll(state) {\n    // If this exists, then this is a back navigation: restore the scroll position\n    if (state) {\n        window.scrollTo(state.__svelte_spa_router_scrollX, state.__svelte_spa_router_scrollY)\n    }\n    else {\n        // Otherwise this is a forward navigation: scroll to top\n        window.scrollTo(0, 0)\n    }\n}\n\n// Internal function used by the link function\nfunction updateLink(node, opts) {\n    let href = opts.href || node.getAttribute('href')\n\n    // Destination must start with '/' or '#/'\n    if (href && href.charAt(0) == '/') {\n        // Add # to the href attribute\n        href = '#' + href\n    }\n    else if (!href || href.length < 2 || href.slice(0, 2) != '#/') {\n        throw Error('Invalid value for \"href\" attribute: ' + href)\n    }\n\n    node.setAttribute('href', href)\n    node.addEventListener('click', (event) => {\n        // Prevent default anchor onclick behaviour\n        event.preventDefault()\n        if (!opts.disabled) {\n            scrollstateHistoryHandler(event.currentTarget.getAttribute('href'))\n        }\n    })\n}\n\n// Internal function that ensures the argument of the link action is always an object\nfunction linkOpts(val) {\n    if (val && typeof val == 'string') {\n        return {\n            href: val\n        }\n    }\n    else {\n        return val || {}\n    }\n}\n\n/**\n * The handler attached to an anchor tag responsible for updating the\n * current history state with the current scroll state\n *\n * @param {string} href - Destination\n */\nfunction scrollstateHistoryHandler(href) {\n    // Setting the url (3rd arg) to href will break clicking for reasons, so don't try to do that\n    history.replaceState({...history.state, __svelte_spa_router_scrollX: window.scrollX, __svelte_spa_router_scrollY: window.scrollY}, undefined)\n    // This will force an update as desired, but this time our scroll state will be attached\n    window.location.hash = href\n}\n</script>\n\n{#if componentParams}\n    <svelte:component\n    this=\"{component}\"\n    params=\"{componentParams}\"\n    on:routeEvent\n    {...props}\n    />\n{:else}\n    <svelte:component\n    this=\"{component}\"\n    on:routeEvent\n    {...props}\n    />\n{/if}\n\n<script>\nimport {onDestroy, createEventDispatcher, afterUpdate} from 'svelte'\nimport {parse} from 'regexparam'\n\n/**\n * Dictionary of all routes, in the format `'/path': component`.\n *\n * For example:\n * ````js\n * import HomeRoute from './routes/HomeRoute.svelte'\n * import BooksRoute from './routes/BooksRoute.svelte'\n * import NotFoundRoute from './routes/NotFoundRoute.svelte'\n * routes = {\n *     '/': HomeRoute,\n *     '/books': BooksRoute,\n *     '*': NotFoundRoute\n * }\n * ````\n */\nexport let routes = {}\n\n/**\n * Optional prefix for the routes in this router. This is useful for example in the case of nested routers.\n */\nexport let prefix = ''\n\n/**\n * If set to true, the router will restore scroll positions on back navigation\n * and scroll to top on forward navigation.\n */\nexport let restoreScrollState = false\n\n/**\n * Container for a route: path, component\n */\nclass RouteItem {\n    /**\n     * Initializes the object and creates a regular expression from the path, using regexparam.\n     *\n     * @param {string} path - Path to the route (must start with '/' or '*')\n     * @param {SvelteComponent|WrappedComponent} component - Svelte component for the route, optionally wrapped\n     */\n    constructor(path, component) {\n        if (!component || (typeof component != 'function' && (typeof component != 'object' || component._sveltesparouter !== true))) {\n            throw Error('Invalid component object')\n        }\n\n        // Path must be a regular or expression, or a string starting with '/' or '*'\n        if (!path || \n            (typeof path == 'string' && (path.length < 1 || (path.charAt(0) != '/' && path.charAt(0) != '*'))) ||\n            (typeof path == 'object' && !(path instanceof RegExp))\n        ) {\n            throw Error('Invalid value for \"path\" argument - strings must start with / or *')\n        }\n\n        const {pattern, keys} = parse(path)\n\n        this.path = path\n\n        // Check if the component is wrapped and we have conditions\n        if (typeof component == 'object' && component._sveltesparouter === true) {\n            this.component = component.component\n            this.conditions = component.conditions || []\n            this.userData = component.userData\n            this.props = component.props || {}\n        }\n        else {\n            // Convert the component to a function that returns a Promise, to normalize it\n            this.component = () => Promise.resolve(component)\n            this.conditions = []\n            this.props = {}\n        }\n\n        this._pattern = pattern\n        this._keys = keys\n    }\n\n    /**\n     * Checks if `path` matches the current route.\n     * If there's a match, will return the list of parameters from the URL (if any).\n     * In case of no match, the method will return `null`.\n     *\n     * @param {string} path - Path to test\n     * @returns {null|Object.<string, string>} List of paramters from the URL if there's a match, or `null` otherwise.\n     */\n    match(path) {\n        // If there's a prefix, check if it matches the start of the path.\n        // If not, bail early, else remove it before we run the matching.\n        if (prefix) {\n            if (typeof prefix == 'string') {\n                if (path.startsWith(prefix)) {\n                    path = path.substr(prefix.length) || '/'\n                }\n                else {\n                    return null\n                }\n            }\n            else if (prefix instanceof RegExp) {\n                const match = path.match(prefix)\n                if (match && match[0]) {\n                    path = path.substr(match[0].length) || '/'\n                }\n                else {\n                    return null\n                }\n            }\n        }\n\n        // Check if the pattern matches\n        const matches = this._pattern.exec(path)\n        if (matches === null) {\n            return null\n        }\n\n        // If the input was a regular expression, this._keys would be false, so return matches as is\n        if (this._keys === false) {\n            return matches\n        }\n\n        const out = {}\n        let i = 0\n        while (i < this._keys.length) {\n            // In the match parameters, URL-decode all values\n            try {\n                out[this._keys[i]] = decodeURIComponent(matches[i + 1] || '') || null\n            }\n            catch (e) {\n                out[this._keys[i]] = null\n            }\n            i++\n        }\n        return out\n    }\n\n    /**\n     * Dictionary with route details passed to the pre-conditions functions, as well as the `routeLoading`, `routeLoaded` and `conditionsFailed` events\n     * @typedef {Object} RouteDetail\n     * @property {string|RegExp} route - Route matched as defined in the route definition (could be a string or a reguar expression object)\n     * @property {string} location - Location path\n     * @property {string} querystring - Querystring from the hash\n     * @property {object} [userData] - Custom data passed by the user\n     * @property {SvelteComponent} [component] - Svelte component (only in `routeLoaded` events)\n     * @property {string} [name] - Name of the Svelte component (only in `routeLoaded` events)\n     */\n\n    /**\n     * Executes all conditions (if any) to control whether the route can be shown. Conditions are executed in the order they are defined, and if a condition fails, the following ones aren't executed.\n     * \n     * @param {RouteDetail} detail - Route detail\n     * @returns {boolean} Returns true if all the conditions succeeded\n     */\n    async checkConditions(detail) {\n        for (let i = 0; i < this.conditions.length; i++) {\n            if (!(await this.conditions[i](detail))) {\n                return false\n            }\n        }\n\n        return true\n    }\n}\n\n// Set up all routes\nconst routesList = []\nif (routes instanceof Map) {\n    // If it's a map, iterate on it right away\n    routes.forEach((route, path) => {\n        routesList.push(new RouteItem(path, route))\n    })\n}\nelse {\n    // We have an object, so iterate on its own properties\n    Object.keys(routes).forEach((path) => {\n        routesList.push(new RouteItem(path, routes[path]))\n    })\n}\n\n// Props for the component to render\nlet component = null\nlet componentParams = null\nlet props = {}\n\n// Event dispatcher from Svelte\nconst dispatch = createEventDispatcher()\n\n// Just like dispatch, but executes on the next iteration of the event loop\nasync function dispatchNextTick(name, detail) {\n    // Execute this code when the current call stack is complete\n    await tick()\n    dispatch(name, detail)\n}\n\n// If this is set, then that means we have popped into this var the state of our last scroll position\nlet previousScrollState = null\n\n// Update history.scrollRestoration depending on restoreScrollState\n$: history.scrollRestoration = restoreScrollState ? 'manual' : 'auto'\nlet popStateChanged = null\nif (restoreScrollState) {\n    popStateChanged = (event) => {\n        // If this event was from our history.replaceState, event.state will contain\n        // our scroll history. Otherwise, event.state will be null (like on forward\n        // navigation)\n        if (event.state && (event.state.__svelte_spa_router_scrollY || event.state.__svelte_spa_router_scrollX)) {\n            previousScrollState = event.state\n        }\n        else {\n            previousScrollState = null\n        }\n    }\n    // This is removed in the destroy() invocation below\n    window.addEventListener('popstate', popStateChanged)\n\n    afterUpdate(() => {\n        restoreScroll(previousScrollState)\n    })\n}\n\n// Always have the latest value of loc\nlet lastLoc = null\n\n// Current object of the component loaded\nlet componentObj = null\n\n// Handle hash change events\n// Listen to changes in the $loc store and update the page\n// Do not use the $: syntax because it gets triggered by too many things\nconst unsubscribeLoc = loc.subscribe(async (newLoc) => {\n    lastLoc = newLoc\n\n    // Find a route matching the location\n    let i = 0\n    while (i < routesList.length) {\n        const match = routesList[i].match(newLoc.location)\n        if (!match) {\n            i++\n            continue\n        }\n\n        const detail = {\n            route: routesList[i].path,\n            location: newLoc.location,\n            querystring: newLoc.querystring,\n            userData: routesList[i].userData,\n            params: (match && typeof match == 'object' && Object.keys(match).length) ? match : null\n        }\n\n        // Check if the route can be loaded - if all conditions succeed\n        if (!(await routesList[i].checkConditions(detail))) {\n            // Don't display anything\n            component = null\n            componentObj = null\n            // Trigger an event to notify the user, then exit\n            dispatchNextTick('conditionsFailed', detail)\n            return\n        }\n\n        // Trigger an event to alert that we're loading the route\n        // We need to clone the object on every event invocation so we don't risk the object to be modified in the next tick\n        dispatchNextTick('routeLoading', Object.assign({}, detail))\n\n        // If there's a component to show while we're loading the route, display it\n        const obj = routesList[i].component\n        // Do not replace the component if we're loading the same one as before, to avoid the route being unmounted and re-mounted\n        if (componentObj != obj) {\n            if (obj.loading) {\n                component = obj.loading\n                componentObj = obj\n                componentParams = obj.loadingParams\n                props = {}\n\n                // Trigger the routeLoaded event for the loading component\n                // Create a copy of detail so we don't modify the object for the dynamic route (and the dynamic route doesn't modify our object too)\n                dispatchNextTick('routeLoaded', Object.assign({}, detail, {\n                    component: component,\n                    name: component.name,\n                    params: componentParams\n                }))\n            }\n            else {\n                component = null\n                componentObj = null\n            }\n\n            // Invoke the Promise\n            const loaded = await obj()\n\n            // Now that we're here, after the promise resolved, check if we still want this component, as the user might have navigated to another page in the meanwhile\n            if (newLoc != lastLoc) {\n                // Don't update the component, just exit\n                return\n            }\n\n            // If there is a \"default\" property, which is used by async routes, then pick that\n            component = (loaded && loaded.default) || loaded\n            componentObj = obj\n        }\n\n        // Set componentParams only if we have a match, to avoid a warning similar to `<Component> was created with unknown prop 'params'`\n        // Of course, this assumes that developers always add a \"params\" prop when they are expecting parameters\n        if (match && typeof match == 'object' && Object.keys(match).length) {\n            componentParams = match\n        }\n        else {\n            componentParams = null\n        }\n\n        // Set static props, if any\n        props = routesList[i].props\n\n        // Dispatch the routeLoaded event then exit\n        // We need to clone the object on every event invocation so we don't risk the object to be modified in the next tick\n        dispatchNextTick('routeLoaded', Object.assign({}, detail, {\n            component: component,\n            name: component.name,\n            params: componentParams\n        })).then(() => {\n            params.set(componentParams)\n        })\n        return\n    }\n\n    // If we're still here, there was no match, so show the empty component\n    component = null\n    componentObj = null\n    params.set(undefined)\n})\n\nonDestroy(() => {\n    unsubscribeLoc()\n    popStateChanged && window.removeEventListener('popstate', popStateChanged)\n})\n</script>\n","\r\n//creates requirement with a name\r\nexport const createRequirementsAsync = async function (requirementName) {\r\n    let response = await fetch(RequirementsApiUrl, {\r\n        headers: { 'accept': \"*/*\", 'content-type': \"application/json; charset=utf-8\" },\r\n        method: 'POST',\r\n        body: JSON.stringify(requirementName)\r\n    })\r\n    const data = await response.json()\r\n    return data\r\n}\r\nexport const getRequirementsAsync = async function () {\r\n    let data = await fetch(RequirementsApiUrl, { method: 'GET' })\r\n    return await data.json()\r\n}\r\nexport const getRequirementAsync = async function (requirementName) {\r\n    let response = await fetch(RequirementsApiUrl + \"/\" + requirementName, { method: 'GET' })\r\n    const data = await response.json()\r\n    return data;\r\n}\r\nexport const deleteRequirementAsync = async function (requirementName) {\r\n    let response = await fetch(RequirementsApiUrl + \"/\" + requirementName, { method: 'DELETE' })\r\n    const data = await response.json()\r\n    return data;\r\n}\r\n\r\n","<script>\r\n    export let Requirements;\r\n    import {\r\n        deleteRequirementAsync,\r\n        getRequirementsAsync,\r\n    } from \"./requirement-provider\";\r\n</script>\r\n\r\n{#each Requirements as item}\r\n    <tr>\r\n        <td class=\"title\"\r\n            ><a href=\"#/requirements/{item.name}\">{item.name}</a></td\r\n        >\r\n        <button\r\n            on:click={async () => {\r\n                await deleteRequirementAsync(item.name);\r\n                await getRequirementsAsync();\r\n            }}\r\n            class=\"btn btn-danger btn-sm rounded-0\"\r\n            type=\"button\"\r\n            data-toggle=\"tooltip\"\r\n            data-placement=\"top\"\r\n            title=\"Delete\"><i class=\"fa fa-trash\" /></button\r\n        >\r\n    </tr>\r\n{/each}\r\n\r\n<!-- on:click={async () => {\r\n                    dispatch(\r\n                        \"showDetail\",\r\n                        await getRequirementAsync(item.name)\r\n                    );\r\n                }}\r\n             -->\r\n\r\n<!-- on:click={async () => {\r\n                await deleteRequirementAsync(item.name);\r\n            }} -->\r\n","<script>\n  import RequirementsList from \"./RequirementsList.svelte\";\n  import {\n    createRequirementsAsync,\n    getRequirementsAsync,\n    getRequirementAsync,\n    deleteRequirementAsync,\n  } from \"./requirement-provider\";\n  export let params;\n\n  const req = async function () {\n    Requirements = await getRequirementsAsync();\n  };\n\n  let Requirements = [];\n  req();\n\n  let text = \"\";\n  const addRequirement = async function () {\n    await createRequirementsAsync(text);\n    text = \"\";\n    req();\n  };\n\n  let detail = \"\";\n  async function showDetail(name) {\n    detail = await getRequirementAsync(name);\n  }\n\n  $: showDetail(params?.reqName);\n</script>\n\n<div class=\"row\">\n  <div class=\"col-lg-3 col-md-12\">\n    <div class=\"card card-primary card-outline\">\n      <div class=\"card-header\">\n        <h5 class=\"card-title\">Requirements:</h5>\n      </div>\n      <div class=\"form-label\">Name:</div>\n      <input\n        type=\"text\"\n        class=\"form-control\"\n        id=\"requirementName\"\n        bind:value={text}\n      />\n      <button on:click={addRequirement} class=\"btn btn-primary\">Submit</button>\n      <div class=\"card-body p-0\">\n        <div class=\"row\">\n          <div class=\"col-12\">\n            <table class=\"table table-sm data-table localesList\">\n              <thead>\n                <tr>\n                  <th>Name</th>\n                </tr>\n              </thead>\n              <tbody>\n                <!-- <RequirementsList {Requirements} on:showDetail={showDetail} /> -->\n                <RequirementsList {Requirements} />\n              </tbody>\n            </table>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n  <div class=\"col-lg-9 col-md-12 svelte-7adzez\">\n    <div class=\"card card-primary card-outline card-tabs\">\n      <div class=\"card-body p-0\" id=\"detailRequirement\">\n        <h2>\n          {JSON.stringify(detail).replaceAll('\"', \"\")}\n        </h2>\n      </div>\n    </div>\n  </div>\n</div>\n","<script>\r\n    export let Resources;\r\n</script>\r\n\r\n{#each Resources as item}\r\n    <tr\r\n        ><td>{JSON.stringify(item.name)}</td><td\r\n            >{JSON.stringify(item.requirementList[0].requirement.name)}</td\r\n        ><td>{JSON.stringify(item.requirementList[0].amount)}</td></tr\r\n    >\r\n{/each}\r\n","\r\n//creates requirement with a name\r\nexport const createResourceAsync = async function (resourceName, requirementName, requirementCapacity) {\r\n    var myData = {};\r\n    myData.ResourceName = resourceName;\r\n    myData.RequirementName = requirementName;\r\n    myData.RequirementCapacity = requirementCapacity;\r\n\r\n    console.log(myData)\r\n\r\n    let response = await fetch(\"http://localhost:5266/api/Resource\", {\r\n        headers: { 'accept': \"*/*\", 'content-type': \"application/json; charset=utf-8\" },\r\n        method: 'POST',\r\n        body: JSON.stringify(myData)\r\n    })\r\n    const data = await response.json()\r\n    return data\r\n}\r\n\r\nexport const getResourcesAsync = async function () {\r\n    let data = await fetch(\"http://localhost:5266/api/Resource\", { method: 'GET' })\r\n    return await data.json()\r\n}\r\n\r\n","<script>\r\n    import ResourceList from \"./ResourceList.svelte\";\r\n    import { getRequirementsAsync } from \"../requirements/requirement-provider\";\r\n    import {\r\n        createResourceAsync,\r\n        getResourcesAsync,\r\n    } from \"./resource-provider\";\r\n\r\n    const req = async function () {\r\n        Resources = await getResourcesAsync();\r\n    };\r\n    let Resources = [];\r\n    req();\r\n\r\n    const requirements = async function () {\r\n        Requirements = await getRequirementsAsync();\r\n    };\r\n    let Requirements = [];\r\n    requirements();\r\n\r\n    let selected;\r\n\r\n    let resourceNameInput = \"\";\r\n    let resourceCapacityInput = 0;\r\n    const addResource = async function () {\r\n        await createResourceAsync(\r\n            resourceNameInput,\r\n            selected,\r\n            resourceCapacityInput\r\n        );\r\n        resourceNameInput = \"\";\r\n        resourceCapacityInput = 0;\r\n        req();\r\n    };\r\n</script>\r\n\r\n<h1>Resources</h1>\r\n<table>\r\n    <tr>\r\n        <th>Resource Name</th>\r\n    </tr>\r\n    <tr>\r\n        <th>Requirement Name</th>\r\n    </tr>\r\n    <tr>\r\n        <th>Requirement Capacity</th>\r\n    </tr>\r\n    <ResourceList {Resources} />\r\n</table>\r\n\r\n<div class=\"mb-3\">\r\n    <div class=\"form-label\">Name:</div>\r\n    <input\r\n        type=\"text\"\r\n        class=\"form-control\"\r\n        id=\"resourceName\"\r\n        bind:value={resourceNameInput}\r\n    />\r\n</div>\r\n\r\n<div class=\"mb-3\">\r\n    <div class=\"form-label\">Requirement Name:</div>\r\n\r\n    <select bind:value={selected}>\r\n        {#each Requirements as item}\r\n            <option value={item.name}>{item.name}</option>\r\n        {/each}\r\n    </select>\r\n    <!-- <ResourceRequirementFill {Requirements} /> -->\r\n</div>\r\n\r\n<div class=\"mb-3\">\r\n    <div class=\"form-label\">Requirement Amount:</div>\r\n    <input\r\n        type=\"number\"\r\n        class=\"form-control\"\r\n        id=\"requirementCapacity\"\r\n        bind:value={resourceCapacityInput}\r\n    />\r\n</div>\r\n\r\n<div class=\"mb-3\">\r\n    <button on:click={addResource} class=\"btn btn-primary\">Submit</button>\r\n</div>\r\n","<h1>Page not found</h1>\r\n","import Requirements from './features/requirements/Requirements.svelte'\r\nimport Resources from './features/resources/Resources.svelte'\r\nimport NotFound from './features/not-found/NotFound.svelte'\r\n\r\nexport default {\r\n    '/requirements': Requirements,\r\n    '/requirements/:reqName': Requirements,\r\n    '/resources': Resources,\r\n    '*': NotFound\r\n}","<script>\r\n    import Router, { location, link } from \"svelte-spa-router\";\r\n    import routes from \"./routes\";\r\n</script>\r\n\r\n<nav class=\"navbar navbar-dark sticky-top bg-dark flex-md-nowrap p-0\">\r\n    <a class=\"navbar-brand col-sm-3 col-md-2 mr-0\" href=\"#\">Company name</a>\r\n    <input\r\n        class=\"form-control form-control-dark w-100\"\r\n        type=\"text\"\r\n        placeholder=\"Search\"\r\n        aria-label=\"Search\"\r\n    />\r\n    <ul class=\"navbar-nav px-3\">\r\n        <li class=\"nav-item text-nowrap\">\r\n            <a class=\"nav-link\" href=\"#\">Sign out</a>\r\n        </li>\r\n    </ul>\r\n</nav>\r\n<Router {routes} />\r\n","// import './app.css'\n// import App from './Requirements.svelte'\n\n// const app = new App({\n//   target: document.getElementById('app'),\n// })\n\n// export default app\n\n// import './assets/bootstrap.css'\nimport './assets/app.css'\nimport App from './App.svelte'\nimport \"C:/Users/Adam/Desktop/WebApplication3/WebApplication3/WebApplication3/wwwroot/js/constants.js\"\n\nconst app = new App({\n  target: document.getElementById('app'),\n})\n\nexport default app\n"],"names":["noop","assign","tar","src","k","run","fn","blank_object","run_all","fns","is_function","thing","safe_not_equal","a","b","is_empty","obj","subscribe","store","callbacks","unsub","append","target","node","insert","anchor","detach","destroy_each","iterations","detaching","i","element","name","text","data","space","empty","listen","event","handler","options","attr","attribute","value","to_number","children","set_data","set_input_value","input","select_option","select","option","select_value","selected_option","custom_event","type","detail","bubbles","cancelable","e","construct_svelte_component","component","props","current_component","set_current_component","get_current_component","afterUpdate","onDestroy","createEventDispatcher","bubble","dirty_components","binding_callbacks","render_callbacks","flush_callbacks","resolved_promise","update_scheduled","schedule_update","flush","tick","add_render_callback","seen_callbacks","flushidx","saved_component","update","callback","$$","dirty","outroing","outros","group_outros","check_outros","transition_in","block","local","transition_out","get_spread_update","levels","updates","to_null_out","accounted_for","o","n","key","get_spread_object","spread_props","create_component","mount_component","customElement","fragment","after_update","new_on_destroy","destroy_component","make_dirty","init","instance","create_fragment","not_equal","append_styles","parent_component","ready","ret","rest","nodes","SvelteComponent","index","$$props","subscriber_queue","readable","start","writable","stop","subscribers","set","new_value","run_queue","subscriber","invalidate","derived","stores","initial_value","single","stores_array","auto","inited","values","pending","cleanup","sync","result","unsubscribers","parse","str","loose","c","tmp","ext","keys","pattern","arr","ctx","switch_instance_spread_levels","getLocation","hashPosition","location","qsPosition","querystring","loc","$loc","params","restoreScroll","state","routes","prefix","restoreScrollState","RouteItem","path","match","matches","out","routesList","route","componentParams","dispatch","dispatchNextTick","previousScrollState","popStateChanged","lastLoc","componentObj","unsubscribeLoc","newLoc","$$invalidate","loaded","createRequirementsAsync","requirementName","getRequirementsAsync","getRequirementAsync","deleteRequirementAsync","t0_value","a_href_value","tr","td","button","t0","Requirements","item","div10","div6","div5","div0","div1","div4","div3","div2","table","thead","tbody","div9","div8","div7","h2","t10","t10_value","req","addRequirement","showDetail","td0","td1","td2","t1","t1_value","t2","t2_value","Resources","createResourceAsync","resourceName","requirementCapacity","myData","getResourcesAsync","t_value","option_value_value","t","h1","tr0","tr1","tr2","input0","input1","requirements","selected","resourceNameInput","resourceCapacityInput","addResource","NotFound","nav","app","App"],"mappings":"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"}